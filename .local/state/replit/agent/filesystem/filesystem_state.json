{
  "file_contents": {
    "drizzle.config.ts": {
      "content": "import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n",
      "size_bytes": 325
    },
    "postcss.config.js": {
      "content": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
      "size_bytes": 80
    },
    "tailwind.config.ts": {
      "content": "import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n",
      "size_bytes": 2766
    },
    "vite.config.ts": {
      "content": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n",
      "size_bytes": 971
    },
    "server/db.ts": {
      "content": "import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 4001,\n});\n\npool.on('error', (err) => {\n  console.error('Unexpected error on idle client', err);\n  process.exit(-1);\n});\n\nexport const db = drizzle({ client: pool, schema });",
      "size_bytes": 669
    },
    "server/index.ts": {
      "content": "import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { linkCheckerService } from \"./link-checker-service\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 4001 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '4001', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Start the background link checking service\n    linkCheckerService.start();\n  });\n\n  // Graceful shutdown\n  process.on('SIGTERM', () => {\n    log('SIGTERM received, shutting down gracefully');\n    linkCheckerService.stop();\n    server.close(() => {\n      log('Server closed');\n      process.exit(0);\n    });\n  });\n\n  process.on('SIGINT', () => {\n    log('SIGINT received, shutting down gracefully');\n    linkCheckerService.stop();\n    server.close(() => {\n      log('Server closed');\n      process.exit(0);\n    });\n  });\n})();\n",
      "size_bytes": 2653
    },
    "server/routes.ts": {
      "content": "import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertBookmarkSchema, insertCategorySchema, insertUserPreferencesSchema } from \"@shared/schema\";\nimport { requireAuth, setupAuth } from \"./auth\";\nimport { linkCheckerService } from \"./link-checker-service\";\nimport { z } from \"zod\";\nimport rateLimit from \"express-rate-limit\";\n\n// Bulk operation schemas\nconst bulkDeleteSchema = z.object({\n  ids: z.array(z.number().int().positive()).min(1, \"At least one bookmark ID is required\"),\n  passcodes: z.record(z.string(), z.string().min(4).max(64)).optional()\n});\n\nconst bulkMoveSchema = z.object({\n  ids: z.array(z.number().int().positive()).min(1, \"At least one bookmark ID is required\"),\n  categoryId: z.number().int().positive().nullable(),\n  passcodes: z.record(z.string(), z.string().min(4).max(64)).optional()\n});\n\n// Vensera user ID for temporary fallback access\nconst VENSERA_USER_ID = 'c73053f2-ec15-438c-8af0-3bf8c7954454';\n\n// Rate limiting for general link checking endpoints\nconst linkCheckRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 50, // Limit each user to 50 requests per hour\n  message: { message: 'Too many link check requests, try again later' },\n  standardHeaders: true,\n  legacyHeaders: false,\n  // Use user ID for authenticated requests, IP for others\n  keyGenerator: (req: any) => {\n    return req.isAuthenticated() ? req.user.id : req.ip;\n  },\n});\n\n// Stricter rate limiting for manual link checker trigger (admin endpoint)\nconst adminTriggerRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 5, // Only 5 manual triggers per hour per admin\n  message: { message: 'Too many manual trigger requests, try again later' },\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req: any) => {\n    // Use user ID for admin requests\n    return req.isAuthenticated() ? `admin_trigger_${req.user.id}` : req.ip;\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication first - this adds passport middleware and session support\n  setupAuth(app);\n\n  // Helper function to get userId from request or fallback to vensera\n  const getUserId = (req: any): string => {\n    return req.isAuthenticated() ? req.user.id : VENSERA_USER_ID;\n  };\n\n  // Helper function to verify passcode for protected bookmark operations\n  const verifyProtectedBookmarkAccess = async (userId: string, bookmarkId: number, providedPasscode: string | undefined, req: any): Promise<{ success: boolean; error?: { status: number; message: string } }> => {\n    // Get the bookmark to check if it's protected\n    const bookmark = await storage.getBookmark(userId, bookmarkId);\n    if (!bookmark) {\n      return { success: false, error: { status: 404, message: \"Bookmark not found\" } };\n    }\n\n    // If bookmark is not protected, allow access\n    if (!bookmark.hasPasscode) {\n      return { success: true };\n    }\n\n    // If bookmark is protected, require passcode\n    if (!providedPasscode || typeof providedPasscode !== 'string') {\n      return { \n        success: false, \n        error: { \n          status: 401, \n          message: \"Passcode required for protected bookmark\" \n        } \n      };\n    }\n\n    // Validate passcode format\n    if (providedPasscode.length < 4 || providedPasscode.length > 64) {\n      return { \n        success: false, \n        error: { \n          status: 400, \n          message: \"Invalid passcode format\" \n        } \n      };\n    }\n\n    // Verify the passcode\n    const isValid = await storage.verifyBookmarkPasscode(userId, bookmarkId, providedPasscode);\n    \n    // Log failed attempts for monitoring\n    if (!isValid) {\n      console.warn(`Failed passcode attempt for protected bookmark ${bookmarkId} from IP ${req.ip}`);\n      return { \n        success: false, \n        error: { \n          status: 401, \n          message: \"Invalid passcode\" \n        } \n      };\n    }\n\n    return { success: true };\n  };\n\n\n  // Bookmark routes\n  app.get(\"/api/bookmarks\", async (req, res) => {\n    try {\n      const userId = getUserId(req);\n      const search = req.query.search as string;\n      const categoryId = req.query.categoryId ? parseInt(req.query.categoryId as string) : undefined;\n      const isFavorite = req.query.isFavorite === \"true\" ? true : undefined;\n      const tags = req.query.tags ? (req.query.tags as string).split(\",\") : undefined;\n      const linkStatus = req.query.linkStatus as string;\n      const sortBy = (req.query.sortBy as \"name\" | \"createdAt\" | \"isFavorite\") || \"createdAt\";\n      const sortOrder = (req.query.sortOrder as \"asc\" | \"desc\") || \"desc\";\n\n      const bookmarks = await storage.getBookmarks(userId, {\n        search,\n        categoryId,\n        isFavorite,\n        tags,\n        linkStatus,\n        sortBy,\n        sortOrder,\n      });\n\n      res.json(bookmarks);\n    } catch (error) {\n      console.error(\"Error fetching bookmarks:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookmarks\" });\n    }\n  });\n\n  app.get(\"/api/bookmarks/:id\", async (req, res) => {\n    try {\n      const userId = getUserId(req);\n      const id = parseInt(req.params.id);\n      const bookmark = await storage.getBookmark(userId, id);\n      \n      if (!bookmark) {\n        return res.status(404).json({ message: \"Bookmark not found\" });\n      }\n      \n      res.json(bookmark);\n    } catch (error) {\n      console.error(\"Error fetching bookmark:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookmark\" });\n    }\n  });\n\n  app.post(\"/api/bookmarks\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const data = insertBookmarkSchema.parse(req.body);\n      const bookmark = await storage.createBookmark(userId, data);\n      res.status(201).json(bookmark);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid bookmark data\", errors: error.errors });\n      }\n      console.error(\"Error creating bookmark:\", error);\n      res.status(500).json({ message: \"Failed to create bookmark\" });\n    }\n  });\n\n  app.patch(\"/api/bookmarks/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const id = parseInt(req.params.id);\n      \n      // Validate bookmark ID\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid bookmark ID\" });\n      }\n      \n      // Parse and validate the data first\n      const data = insertBookmarkSchema.partial().parse(req.body);\n      \n      // Extract passcode from request body for security verification\n      const { passcode } = req.body;\n      \n      // Verify access for protected bookmarks\n      const accessResult = await verifyProtectedBookmarkAccess(userId, id, passcode, req);\n      if (!accessResult.success) {\n        return res.status(accessResult.error!.status).json({ message: accessResult.error!.message });\n      }\n      \n      // Proceed with update if access is granted\n      const bookmark = await storage.updateBookmark(userId, id, data);\n      res.json(bookmark);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid bookmark data\", errors: error.errors });\n      }\n      console.error(\"Error updating bookmark:\", error);\n      res.status(500).json({ message: \"Failed to update bookmark\" });\n    }\n  });\n\n  app.delete(\"/api/bookmarks/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const id = parseInt(req.params.id);\n      \n      // Validate bookmark ID\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid bookmark ID\" });\n      }\n      \n      // Extract passcode from request body for security verification\n      const { passcode } = req.body;\n      \n      // Verify access for protected bookmarks\n      const accessResult = await verifyProtectedBookmarkAccess(userId, id, passcode, req);\n      if (!accessResult.success) {\n        return res.status(accessResult.error!.status).json({ message: accessResult.error!.message });\n      }\n      \n      // Proceed with deletion if access is granted\n      await storage.deleteBookmark(userId, id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting bookmark:\", error);\n      res.status(500).json({ message: \"Failed to delete bookmark\" });\n    }\n  });\n\n  // Passcode verification endpoint\n  app.post(\"/api/bookmarks/:id/verify-passcode\", async (req, res) => {\n    try {\n      const userId = getUserId(req);\n      const id = parseInt(req.params.id);\n      \n      // Validate bookmark ID\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid bookmark ID\" });\n      }\n      \n      const { passcode } = req.body;\n      \n      // Validate passcode input\n      if (!passcode || typeof passcode !== 'string') {\n        return res.status(400).json({ message: \"Passcode is required and must be a string\" });\n      }\n      \n      if (passcode.length < 4 || passcode.length > 64) {\n        return res.status(400).json({ message: \"Invalid passcode format\" });\n      }\n      \n      // Check if bookmark exists first (avoid revealing existence through timing)\n      const bookmark = await storage.getBookmark(userId, id);\n      if (!bookmark) {\n        return res.status(404).json({ message: \"Bookmark not found\" });\n      }\n      \n      const isValid = await storage.verifyBookmarkPasscode(userId, id, passcode);\n      \n      // Log failed attempts for monitoring\n      if (!isValid) {\n        console.warn(`Failed passcode attempt for bookmark ${id} from IP ${req.ip}`);\n      }\n      \n      res.json({ valid: isValid });\n    } catch (error) {\n      console.error(\"Error verifying passcode:\", error);\n      res.status(500).json({ message: \"Failed to verify passcode\" });\n    }\n  });\n\n  // Auto-tagging endpoints\n  app.post(\"/api/bookmarks/preview-auto-tags\", async (req, res) => {\n    try {\n      // Validate request body\n      const previewSchema = z.object({\n        url: z.string().url(\"Please provide a valid URL\"),\n        name: z.string().optional(),\n        description: z.string().optional()\n      });\n      \n      const { url, name, description } = previewSchema.parse(req.body);\n      \n      // Generate suggested tags without saving to database\n      const suggestedTags = await storage.generateAutoTags(\n        url, \n        name || \"\", \n        description || undefined\n      );\n      \n      res.json({ suggestedTags });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error generating preview auto tags:\", error);\n      res.status(500).json({ message: \"Failed to generate tag suggestions\" });\n    }\n  });\n\n  app.post(\"/api/bookmarks/:id/auto-tags\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const id = parseInt(req.params.id);\n      \n      // Validate bookmark ID\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid bookmark ID\" });\n      }\n      \n      // Extract passcode from request body for security verification\n      const { passcode } = req.body;\n      \n      // Verify access for protected bookmarks\n      const accessResult = await verifyProtectedBookmarkAccess(userId, id, passcode, req);\n      if (!accessResult.success) {\n        return res.status(accessResult.error!.status).json({ message: accessResult.error!.message });\n      }\n      \n      // Get the bookmark to analyze\n      const bookmark = await storage.getBookmark(userId, id);\n      if (!bookmark) {\n        return res.status(404).json({ message: \"Bookmark not found\" });\n      }\n      \n      // Generate suggested tags based on URL, name, and description\n      const suggestedTags = await storage.generateAutoTags(\n        bookmark.url, \n        bookmark.name, \n        bookmark.description || undefined\n      );\n      \n      // Update the bookmark with suggested tags\n      await storage.updateBookmarkSuggestedTags(userId, id, suggestedTags);\n      \n      res.json({ suggestedTags });\n    } catch (error) {\n      console.error(\"Error generating auto tags:\", error);\n      res.status(500).json({ message: \"Failed to generate auto tags\" });\n    }\n  });\n\n  app.post(\"/api/bookmarks/bulk/auto-tags\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      \n      // Validate request body\n      const bulkAutoTagSchema = z.object({\n        ids: z.array(z.number().int().positive()).min(1, \"At least one bookmark ID is required\").max(50, \"Maximum 50 bookmarks allowed per batch\"),\n        passcodes: z.record(z.string(), z.string().min(4).max(64)).optional()\n      });\n      \n      const { ids, passcodes } = bulkAutoTagSchema.parse(req.body);\n      \n      const results: { id: number; suggestedTags: string[] }[] = [];\n      const failed: { id: number; reason: string }[] = [];\n      \n      // Process each bookmark\n      for (const id of ids) {\n        try {\n          // Verify access for protected bookmarks\n          const providedPasscode = passcodes ? passcodes[id.toString()] : undefined;\n          const accessResult = await verifyProtectedBookmarkAccess(userId, id, providedPasscode, req);\n          if (!accessResult.success) {\n            failed.push({ id, reason: accessResult.error!.message });\n            continue;\n          }\n          \n          // Get the bookmark to analyze\n          const bookmark = await storage.getBookmark(userId, id);\n          if (!bookmark) {\n            failed.push({ id, reason: \"Bookmark not found\" });\n            continue;\n          }\n          \n          // Generate suggested tags based on URL, name, and description\n          const suggestedTags = await storage.generateAutoTags(\n            bookmark.url, \n            bookmark.name, \n            bookmark.description || undefined\n          );\n          \n          // Update the bookmark with suggested tags\n          await storage.updateBookmarkSuggestedTags(userId, id, suggestedTags);\n          \n          results.push({ id, suggestedTags });\n        } catch (error) {\n          console.error(`Error processing bookmark ${id}:`, error);\n          failed.push({ id, reason: \"Processing failed\" });\n        }\n      }\n      \n      res.json({ results, failed });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error in bulk auto-tagging:\", error);\n      res.status(500).json({ message: \"Failed to process bulk auto-tagging\" });\n    }\n  });\n\n  app.patch(\"/api/bookmarks/:id/tags/accept\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const id = parseInt(req.params.id);\n      \n      // Validate bookmark ID\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid bookmark ID\" });\n      }\n      \n      // Validate request body\n      const acceptTagsSchema = z.object({\n        tags: z.array(z.string().trim().min(1)).min(1, \"At least one tag is required\"),\n        passcode: z.string().min(4).max(64).optional()\n      });\n      \n      const { tags, passcode } = acceptTagsSchema.parse(req.body);\n      \n      // Verify access for protected bookmarks\n      const accessResult = await verifyProtectedBookmarkAccess(userId, id, passcode, req);\n      if (!accessResult.success) {\n        return res.status(accessResult.error!.status).json({ message: accessResult.error!.message });\n      }\n      \n      // Check if bookmark exists\n      const bookmark = await storage.getBookmark(userId, id);\n      if (!bookmark) {\n        return res.status(404).json({ message: \"Bookmark not found\" });\n      }\n      \n      // Accept the suggested tags\n      const updatedBookmark = await storage.acceptSuggestedTags(userId, id, tags);\n      \n      res.json(updatedBookmark);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error accepting suggested tags:\", error);\n      res.status(500).json({ message: \"Failed to accept suggested tags\" });\n    }\n  });\n\n  // Bookmark sharing endpoints\n  app.patch(\"/api/bookmarks/:id/share\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const id = parseInt(req.params.id);\n      \n      // Validate bookmark ID\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid bookmark ID\" });\n      }\n      \n      // Validate request body using Zod\n      const shareSchema = z.object({\n        isShared: z.boolean()\n      });\n      \n      const { isShared } = shareSchema.parse(req.body);\n      \n      // Get the bookmark first to check if it's protected\n      const bookmark = await storage.getBookmark(userId, id);\n      if (!bookmark) {\n        return res.status(404).json({ message: \"Bookmark not found\" });\n      }\n      \n      // Prevent sharing of protected bookmarks\n      if (bookmark.hasPasscode && isShared) {\n        return res.status(403).json({ message: \"Protected bookmarks cannot be shared\" });\n      }\n      \n      // Update bookmark sharing status\n      const updatedBookmark = await storage.setBookmarkSharing(userId, id, isShared);\n      res.json(updatedBookmark);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error updating bookmark sharing:\", error);\n      res.status(500).json({ message: \"Failed to update bookmark sharing\" });\n    }\n  });\n\n  // Public shared bookmark access (no authentication required)\n  app.get(\"/api/shared/:shareId\", async (req, res) => {\n    try {\n      const shareId = req.params.shareId;\n      \n      if (!shareId) {\n        return res.status(400).json({ message: \"Share ID is required\" });\n      }\n      \n      const sharedBookmark = await storage.getSharedBookmark(shareId);\n      \n      if (!sharedBookmark) {\n        return res.status(404).json({ message: \"Shared bookmark not found\" });\n      }\n      \n      res.json(sharedBookmark);\n    } catch (error) {\n      console.error(\"Error fetching shared bookmark:\", error);\n      res.status(500).json({ message: \"Failed to fetch shared bookmark\" });\n    }\n  });\n\n  // Bulk operations for bookmarks\n  app.post(\"/api/bookmarks/bulk/delete\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      \n      // Validate request body\n      const { ids, passcodes } = bulkDeleteSchema.parse(req.body);\n      \n      // Perform bulk deletion\n      const result = await storage.bulkDeleteBookmarks(userId, ids, passcodes);\n      \n      // Return results\n      res.json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error in bulk delete bookmarks:\", error);\n      res.status(500).json({ message: \"Failed to delete bookmarks\" });\n    }\n  });\n\n  app.patch(\"/api/bookmarks/bulk/move\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      \n      // Validate request body\n      const { ids, categoryId, passcodes } = bulkMoveSchema.parse(req.body);\n      \n      // Perform bulk move\n      const result = await storage.bulkMoveBookmarks(userId, ids, categoryId, passcodes);\n      \n      // Return results\n      res.json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error in bulk move bookmarks:\", error);\n      res.status(500).json({ message: \"Failed to move bookmarks\" });\n    }\n  });\n\n  // Category routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const userId = getUserId(req);\n      const withCounts = req.query.withCounts === \"true\";\n      const categories = withCounts \n        ? await storage.getCategoriesWithCounts(userId)\n        : await storage.getCategories(userId);\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const userId = getUserId(req);\n      const id = parseInt(req.params.id);\n      const category = await storage.getCategory(userId, id);\n      \n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      \n      res.json(category);\n    } catch (error) {\n      console.error(\"Error fetching category:\", error);\n      res.status(500).json({ message: \"Failed to fetch category\" });\n    }\n  });\n\n  app.post(\"/api/categories\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const data = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(userId, data);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid category data\", errors: error.errors });\n      }\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.patch(\"/api/categories/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const id = parseInt(req.params.id);\n      const data = insertCategorySchema.partial().parse(req.body);\n      const category = await storage.updateCategory(userId, id, data);\n      res.json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid category data\", errors: error.errors });\n      }\n      console.error(\"Error updating category:\", error);\n      res.status(500).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteCategory(userId, id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Stats route\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const userId = getUserId(req);\n      const stats = await storage.getBookmarkStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // User Preferences routes\n  app.get(\"/api/preferences\", async (req, res) => {\n    try {\n      const userId = getUserId(req);\n      const preferences = await storage.getUserPreferences(userId);\n      if (!preferences) {\n        // Return default preferences if none exist\n        return res.json({\n          theme: \"light\",\n          viewMode: \"grid\"\n        });\n      }\n      res.json(preferences);\n    } catch (error) {\n      console.error(\"Error fetching preferences:\", error);\n      res.status(500).json({ message: \"Failed to fetch preferences\" });\n    }\n  });\n\n  app.patch(\"/api/preferences\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id; // Use authenticated user ID only\n      const data = insertUserPreferencesSchema.partial().parse(req.body);\n      const preferences = await storage.updateUserPreferences(userId, data);\n      res.json(preferences);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid preferences data\", errors: error.errors });\n      }\n      console.error(\"Error updating preferences:\", error);\n      res.status(500).json({ message: \"Failed to update preferences\" });\n    }\n  });\n\n  // Screenshot routes\n  app.post(\"/api/bookmarks/:id/screenshot\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const id = parseInt(req.params.id);\n      \n      // Validate bookmark ID\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid bookmark ID\" });\n      }\n      \n      // Extract passcode from request body for security verification\n      const { passcode } = req.body;\n      \n      // Verify access for protected bookmarks\n      const accessResult = await verifyProtectedBookmarkAccess(userId, id, passcode, req);\n      if (!accessResult.success) {\n        return res.status(accessResult.error!.status).json({ message: accessResult.error!.message });\n      }\n      \n      // Trigger screenshot generation\n      const result = await storage.triggerScreenshot(userId, id);\n      \n      if (result.status === 'error') {\n        return res.status(400).json(result);\n      }\n      \n      // Return 202 Accepted for async operation\n      res.status(202).json(result);\n    } catch (error) {\n      console.error(\"Error triggering screenshot:\", error);\n      res.status(500).json({ message: \"Failed to trigger screenshot generation\" });\n    }\n  });\n\n  app.get(\"/api/bookmarks/:id/screenshot/status\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const id = parseInt(req.params.id);\n      \n      // Validate bookmark ID\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid bookmark ID\" });\n      }\n      \n      // Get screenshot status\n      const status = await storage.getScreenshotStatus(userId, id);\n      \n      if (!status) {\n        return res.status(404).json({ message: \"Bookmark not found\" });\n      }\n      \n      res.json(status);\n    } catch (error) {\n      console.error(\"Error getting screenshot status:\", error);\n      res.status(500).json({ message: \"Failed to get screenshot status\" });\n    }\n  });\n\n  // Link checking endpoints\n  app.post(\"/api/bookmarks/:id/check-link\", linkCheckRateLimit, requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const id = parseInt(req.params.id);\n      \n      // Validate bookmark ID\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid bookmark ID\" });\n      }\n      \n      // Extract passcode from request body for security verification\n      const { passcode } = req.body;\n      \n      // Verify access for protected bookmarks\n      const accessResult = await verifyProtectedBookmarkAccess(userId, id, passcode, req);\n      if (!accessResult.success) {\n        return res.status(accessResult.error!.status).json({ message: accessResult.error!.message });\n      }\n      \n      // Perform the link check\n      const result = await storage.checkBookmarkLink(userId, id);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error checking bookmark link:\", error);\n      res.status(500).json({ message: \"Failed to check bookmark link\" });\n    }\n  });\n\n  app.post(\"/api/bookmarks/bulk/check-links\", linkCheckRateLimit, requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      \n      // Validate request body\n      const bulkCheckLinkSchema = z.object({\n        ids: z.array(z.number().int().positive()).optional().default([]),\n        passcodes: z.record(z.string(), z.string().min(4).max(64)).optional()\n      });\n      \n      const { ids, passcodes } = bulkCheckLinkSchema.parse(req.body);\n      \n      // Limit to prevent abuse (max 50 bookmarks per request)\n      if (ids.length > 50) {\n        return res.status(400).json({ \n          message: \"Maximum 50 bookmarks allowed per bulk check request\" \n        });\n      }\n      \n      // If specific IDs provided, verify passcode access for protected bookmarks\n      if (ids.length > 0) {\n        const accessErrors: { id: number; reason: string }[] = [];\n        \n        for (const id of ids) {\n          const providedPasscode = passcodes ? passcodes[id.toString()] : undefined;\n          const accessResult = await verifyProtectedBookmarkAccess(userId, id, providedPasscode, req);\n          if (!accessResult.success) {\n            accessErrors.push({ id, reason: accessResult.error!.message });\n          }\n        }\n        \n        // If any access errors, return them\n        if (accessErrors.length > 0) {\n          return res.status(403).json({ \n            message: \"Access denied for some bookmarks\",\n            accessErrors \n          });\n        }\n      }\n      \n      // Perform bulk link checking\n      const result = await storage.bulkCheckBookmarkLinks(userId, ids.length > 0 ? ids : undefined);\n      res.json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error in bulk link checking:\", error);\n      res.status(500).json({ message: \"Failed to perform bulk link checking\" });\n    }\n  });\n\n  // Link checker service management endpoints\n  app.get(\"/api/link-checker/status\", requireAuth, async (req, res) => {\n    try {\n      const status = linkCheckerService.getStatus();\n      res.json(status);\n    } catch (error) {\n      console.error(\"Error getting link checker status:\", error);\n      res.status(500).json({ message: \"Failed to get link checker status\" });\n    }\n  });\n\n  // Helper function to check admin privileges\n  const isAdminUser = (userId: string): boolean => {\n    // For now, only VENSERA_USER_ID has admin privileges\n    // In a production system, this would check against a roles table or admin user list\n    const adminUserIds = [\n      VENSERA_USER_ID,\n      // Add more admin user IDs here as needed\n    ];\n    return adminUserIds.includes(userId);\n  };\n\n  app.post(\"/api/link-checker/trigger\", adminTriggerRateLimit, requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      \n      // Enhanced admin authorization check\n      if (!isAdminUser(userId)) {\n        // Log unauthorized attempts for monitoring\n        console.warn(`Unauthorized manual trigger attempt from user ${userId} at IP ${req.ip}`);\n        return res.status(403).json({ \n          message: \"Unauthorized: Admin privileges required to trigger manual link checks\" \n        });\n      }\n\n      console.log(`Manual link check triggered by admin user: ${userId}`);\n      const result = await linkCheckerService.triggerManualCheck();\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error triggering manual link check:\", error);\n      res.status(500).json({ message: \"Failed to trigger manual link check\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n",
      "size_bytes": 30980
    },
    "server/seed.ts": {
      "content": "import { db } from './db';\nimport { bookmarks, categories } from '@shared/schema';\n\nasync function seed() {\n  console.log('Starting database seed...');\n  \n  try {\n    // Clear existing data\n    console.log('Clearing existing data...');\n    await db.delete(bookmarks);\n    await db.delete(categories);\n\n    // Seed categories\n    console.log('Creating categories...');\n    const createdCategories = await db.insert(categories).values([\n      { name: 'Development', parentId: null },\n      { name: 'Design', parentId: null },\n      { name: 'JavaScript', parentId: null },\n      { name: 'Learning', parentId: null },\n      { name: 'Tools', parentId: null },\n    ]).returning();\n\n    const devCategory = createdCategories.find(c => c.name === 'Development');\n    const designCategory = createdCategories.find(c => c.name === 'Design');\n    const jsCategory = createdCategories.find(c => c.name === 'JavaScript');\n    const learningCategory = createdCategories.find(c => c.name === 'Learning');\n    const toolsCategory = createdCategories.find(c => c.name === 'Tools');\n\n    // Seed bookmarks\n    console.log('Creating bookmarks...');\n    await db.insert(bookmarks).values([\n      {\n        name: 'React Documentation',\n        description: 'Official React documentation with guides, tutorials, and API reference.',\n        url: 'https://react.dev',\n        tags: ['react', 'frontend', 'documentation'],\n        isFavorite: true,\n        categoryId: devCategory?.id || null,\n      },\n      {\n        name: 'TypeScript Handbook',\n        description: 'Complete guide to TypeScript for JavaScript developers.',\n        url: 'https://www.typescriptlang.org/docs/',\n        tags: ['typescript', 'javascript', 'programming'],\n        isFavorite: true,\n        categoryId: jsCategory?.id || null,\n      },\n      {\n        name: 'Dribbble',\n        description: 'Discover the world\\'s top designers & creative professionals.',\n        url: 'https://dribbble.com',\n        tags: ['design', 'inspiration', 'ui', 'ux'],\n        isFavorite: false,\n        categoryId: designCategory?.id || null,\n      },\n      {\n        name: 'MDN Web Docs',\n        description: 'Resources for developers, by developers.',\n        url: 'https://developer.mozilla.org',\n        tags: ['web', 'documentation', 'reference'],\n        isFavorite: true,\n        categoryId: devCategory?.id || null,\n      },\n      {\n        name: 'Tailwind CSS',\n        description: 'A utility-first CSS framework packed with classes.',\n        url: 'https://tailwindcss.com',\n        tags: ['css', 'framework', 'frontend'],\n        isFavorite: false,\n        categoryId: devCategory?.id || null,\n      },\n      {\n        name: 'Figma',\n        description: 'The collaborative interface design tool.',\n        url: 'https://www.figma.com',\n        tags: ['design', 'prototyping', 'collaboration'],\n        isFavorite: true,\n        categoryId: designCategory?.id || null,\n      },\n      {\n        name: 'JavaScript.info',\n        description: 'The Modern JavaScript Tutorial.',\n        url: 'https://javascript.info',\n        tags: ['javascript', 'tutorial', 'learning'],\n        isFavorite: false,\n        categoryId: learningCategory?.id || null,\n      },\n      {\n        name: 'GitHub',\n        description: 'The world\\'s leading software development platform.',\n        url: 'https://github.com',\n        tags: ['git', 'development', 'collaboration'],\n        isFavorite: true,\n        categoryId: toolsCategory?.id || null,\n      },\n      {\n        name: 'VS Code',\n        description: 'Free source-code editor made by Microsoft.',\n        url: 'https://code.visualstudio.com',\n        tags: ['editor', 'ide', 'development'],\n        isFavorite: false,\n        categoryId: toolsCategory?.id || null,\n      },\n      {\n        name: 'Stack Overflow',\n        description: 'The largest online community for developers.',\n        url: 'https://stackoverflow.com',\n        tags: ['programming', 'community', 'q&a'],\n        isFavorite: false,\n        categoryId: learningCategory?.id || null,\n      },\n      {\n        name: 'Unsplash',\n        description: 'Beautiful, free images and photos that you can download and use.',\n        url: 'https://unsplash.com',\n        tags: ['photos', 'free', 'stock'],\n        isFavorite: false,\n        categoryId: designCategory?.id || null,\n      },\n      {\n        name: 'npm',\n        description: 'The package manager for JavaScript and the world\\'s largest software registry.',\n        url: 'https://www.npmjs.com',\n        tags: ['javascript', 'packages', 'node'],\n        isFavorite: false,\n        categoryId: jsCategory?.id || null,\n      },\n    ]);\n\n    console.log('Seed completed successfully!');\n    process.exit(0);\n  } catch (error) {\n    console.error('Error seeding database:', error);\n    process.exit(1);\n  }\n}\n\n// Run the seed function\nseed();",
      "size_bytes": 4849
    },
    "server/storage.ts": {
      "content": "import { bookmarks, categories, users, userPreferences, type Bookmark, type InsertBookmark, type InsertBookmarkInternal, type Category, type InsertCategory, type User, type InsertUser, type UserPreferences, type InsertUserPreferences } from \"@shared/schema\";\nimport { db, pool } from \"./db\";\nimport { eq, ilike, or, desc, asc, and, isNull, sql, inArray } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\nimport ConnectPgSimple from \"connect-pg-simple\";\nimport session from \"express-session\";\nimport crypto from \"crypto\";\n\nconst PgSession = ConnectPgSimple(session);\n\nexport interface IStorage {\n  // Session store for authentication\n  sessionStore: any;\n  \n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Bookmark methods\n  getBookmarks(userId: string, params?: {\n    search?: string;\n    categoryId?: number;\n    isFavorite?: boolean;\n    tags?: string[];\n    linkStatus?: string;\n    sortBy?: 'name' | 'createdAt' | 'isFavorite';\n    sortOrder?: 'asc' | 'desc';\n  }): Promise<(Bookmark & { category?: Category; hasPasscode?: boolean })[]>;\n  getBookmark(userId: string, id: number): Promise<(Bookmark & { category?: Category; hasPasscode?: boolean }) | undefined>;\n  createBookmark(userId: string, bookmark: InsertBookmark): Promise<Bookmark>;\n  updateBookmark(userId: string, id: number, bookmark: Partial<InsertBookmark>): Promise<Bookmark>;\n  deleteBookmark(userId: string, id: number): Promise<void>;\n  verifyBookmarkPasscode(userId: string, id: number, passcode: string): Promise<boolean>;\n  \n  // Bulk operations\n  bulkDeleteBookmarks(userId: string, ids: number[], passcodes?: Record<string, string>): Promise<{\n    deletedIds: number[];\n    failed: { id: number; reason: string }[];\n  }>;\n  bulkMoveBookmarks(userId: string, ids: number[], categoryId: number | null, passcodes?: Record<string, string>): Promise<{\n    movedIds: number[];\n    failed: { id: number; reason: string }[];\n  }>;\n  \n  // Category methods\n  getCategories(userId: string): Promise<Category[]>;\n  getCategoriesWithCounts(userId: string): Promise<(Category & { bookmarkCount: number })[]>;\n  getCategory(userId: string, id: number): Promise<Category | undefined>;\n  createCategory(userId: string, category: InsertCategory): Promise<Category>;\n  updateCategory(userId: string, id: number, category: Partial<InsertCategory>): Promise<Category>;\n  deleteCategory(userId: string, id: number): Promise<void>;\n  \n  // Stats methods\n  getBookmarkStats(userId: string): Promise<{\n    total: number;\n    favorites: number;\n    categories: number;\n    tags: string[];\n    linkStats?: {\n      total: number;\n      working: number;\n      broken: number;\n      timeout: number;\n      unknown: number;\n    };\n  }>;\n  \n  // User Preferences methods\n  getUserPreferences(userId: string): Promise<UserPreferences | undefined>;\n  updateUserPreferences(userId: string, preferences: Partial<InsertUserPreferences>): Promise<UserPreferences>;\n  \n  // Bookmark sharing methods\n  generateShareId(): string;\n  setBookmarkSharing(userId: string, bookmarkId: number, isShared: boolean): Promise<Bookmark>;\n  getSharedBookmark(shareId: string): Promise<{ \n    name: string; \n    description: string | null; \n    url: string; \n    tags: string[] | null; \n    createdAt: Date;\n    category?: { name: string } | null;\n  } | undefined>;\n  \n  // Auto-tagging methods\n  updateBookmarkSuggestedTags(userId: string, bookmarkId: number, suggestedTags: string[]): Promise<Bookmark & { hasPasscode?: boolean }>;\n  acceptSuggestedTags(userId: string, bookmarkId: number, tagsToAccept: string[]): Promise<Bookmark & { hasPasscode?: boolean }>;\n  generateAutoTags(url: string, name?: string, description?: string): Promise<string[]>;\n  \n  // Screenshot methods\n  triggerScreenshot(userId: string, bookmarkId: number): Promise<{ status: string; message: string }>;\n  updateScreenshotStatus(bookmarkId: number, status: string, url?: string): Promise<void>;\n  getScreenshotStatus(userId: string, bookmarkId: number): Promise<{ status: string; screenshotUrl?: string; updatedAt?: Date } | undefined>;\n  \n  // Link checking methods\n  checkBookmarkLink(userId: string, bookmarkId: number): Promise<{ linkStatus: string; httpStatus?: number; lastLinkCheckAt: Date }>;\n  bulkCheckBookmarkLinks(userId: string, bookmarkIds?: number[]): Promise<{\n    checkedIds: number[];\n    failed: { id: number; reason: string }[];\n  }>;\n  updateLinkStatus(bookmarkId: number, linkStatus: string, httpStatus?: number, linkFailCount?: number): Promise<void>;\n  getBookmarksForLinkCheck(limit: number, userId?: string): Promise<{ id: number; url: string; lastLinkCheckAt: Date | null }[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  public sessionStore: any;\n\n  constructor() {\n    // Initialize PostgreSQL session store with connect-pg-simple\n    this.sessionStore = new PgSession({\n      pool: pool,\n      tableName: 'session',\n      createTableIfMissing: true,\n    });\n  }\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Bookmark methods\n  async getBookmarks(userId: string, params?: {\n    search?: string;\n    categoryId?: number;\n    isFavorite?: boolean;\n    tags?: string[];\n    linkStatus?: string;\n    sortBy?: 'name' | 'createdAt' | 'isFavorite';\n    sortOrder?: 'asc' | 'desc';\n  }): Promise<(Bookmark & { category?: Category; hasPasscode?: boolean })[]> {\n    // Build conditions - always filter by userId first\n    const conditions = [eq(bookmarks.userId, userId)];\n\n    if (params?.search) {\n      const searchCondition = or(\n        ilike(bookmarks.name, `%${params.search}%`),\n        ilike(bookmarks.description, `%${params.search}%`),\n        ilike(bookmarks.url, `%${params.search}%`),\n        // Search within tags array - convert array to string and search\n        sql`array_to_string(${bookmarks.tags}, ' ') ILIKE ${`%${params.search}%`}`,\n      );\n      if (searchCondition) {\n        conditions.push(searchCondition);\n      }\n    }\n\n    if (params?.categoryId !== undefined) {\n      conditions.push(eq(bookmarks.categoryId, params.categoryId));\n    }\n\n    if (params?.isFavorite !== undefined) {\n      conditions.push(eq(bookmarks.isFavorite, params.isFavorite));\n    }\n\n    if (params?.tags && params.tags.length > 0) {\n      // Use proper array search with array_to_string for tag filtering\n      const tagCondition = or(...params.tags.map(tag => \n        sql`array_to_string(${bookmarks.tags}, ' ') ILIKE ${`%${tag}%`}`\n      ));\n      if (tagCondition) {\n        conditions.push(tagCondition);\n      }\n    }\n\n    if (params?.linkStatus) {\n      // Filter by link status\n      if (params.linkStatus === 'unknown') {\n        // For 'unknown' status, include both NULL values and 'unknown' values\n        conditions.push(or(\n          isNull(bookmarks.linkStatus),\n          eq(bookmarks.linkStatus, 'unknown')\n        ));\n      } else {\n        conditions.push(eq(bookmarks.linkStatus, params.linkStatus));\n      }\n    }\n\n    // Build query with conditions\n    let baseQuery = db.select({\n      id: bookmarks.id,\n      name: bookmarks.name,\n      description: bookmarks.description,\n      url: bookmarks.url,\n      tags: bookmarks.tags,\n      suggestedTags: bookmarks.suggestedTags,\n      isFavorite: bookmarks.isFavorite,\n      categoryId: bookmarks.categoryId,\n      userId: bookmarks.userId,\n      passcodeHash: bookmarks.passcodeHash,\n      isShared: bookmarks.isShared,\n      shareId: bookmarks.shareId,\n      screenshotUrl: bookmarks.screenshotUrl,\n      screenshotStatus: bookmarks.screenshotStatus,\n      screenshotUpdatedAt: bookmarks.screenshotUpdatedAt,\n      linkStatus: bookmarks.linkStatus,\n      httpStatus: bookmarks.httpStatus,\n      lastLinkCheckAt: bookmarks.lastLinkCheckAt,\n      linkFailCount: bookmarks.linkFailCount,\n      createdAt: bookmarks.createdAt,\n      updatedAt: bookmarks.updatedAt,\n      category: categories,\n    }).from(bookmarks)\n    .leftJoin(categories, and(eq(bookmarks.categoryId, categories.id), eq(categories.userId, userId)))\n    .where(conditions.length > 0 ? and(...conditions) : undefined);\n\n    // Add sorting\n    const sortBy = params?.sortBy || 'createdAt';\n    const sortOrder = params?.sortOrder || 'desc';\n    \n    let finalQuery;\n    if (sortBy === 'name') {\n      finalQuery = baseQuery.orderBy(sortOrder === 'asc' ? asc(bookmarks.name) : desc(bookmarks.name));\n    } else if (sortBy === 'isFavorite') {\n      finalQuery = baseQuery.orderBy(sortOrder === 'asc' ? asc(bookmarks.isFavorite) : desc(bookmarks.isFavorite));\n    } else {\n      finalQuery = baseQuery.orderBy(sortOrder === 'asc' ? asc(bookmarks.createdAt) : desc(bookmarks.createdAt));\n    }\n\n    const results = await finalQuery;\n    return results.map(row => {\n      const { passcodeHash, ...bookmarkData } = row;\n      return {\n        ...bookmarkData,\n        category: row.category || undefined,\n        hasPasscode: !!passcodeHash,\n      };\n    });\n  }\n\n  async getBookmark(userId: string, id: number): Promise<(Bookmark & { category?: Category; hasPasscode?: boolean }) | undefined> {\n    const [result] = await db.select({\n      id: bookmarks.id,\n      name: bookmarks.name,\n      description: bookmarks.description,\n      url: bookmarks.url,\n      tags: bookmarks.tags,\n      suggestedTags: bookmarks.suggestedTags,\n      isFavorite: bookmarks.isFavorite,\n      categoryId: bookmarks.categoryId,\n      userId: bookmarks.userId,\n      passcodeHash: bookmarks.passcodeHash,\n      isShared: bookmarks.isShared,\n      shareId: bookmarks.shareId,\n      screenshotUrl: bookmarks.screenshotUrl,\n      screenshotStatus: bookmarks.screenshotStatus,\n      screenshotUpdatedAt: bookmarks.screenshotUpdatedAt,\n      linkStatus: bookmarks.linkStatus,\n      httpStatus: bookmarks.httpStatus,\n      lastLinkCheckAt: bookmarks.lastLinkCheckAt,\n      linkFailCount: bookmarks.linkFailCount,\n      createdAt: bookmarks.createdAt,\n      updatedAt: bookmarks.updatedAt,\n      category: categories,\n    }).from(bookmarks)\n    .leftJoin(categories, and(eq(bookmarks.categoryId, categories.id), eq(categories.userId, userId)))\n    .where(and(eq(bookmarks.id, id), eq(bookmarks.userId, userId)));\n\n    if (!result) return undefined;\n\n    const { passcodeHash, ...bookmarkData } = result;\n    return {\n      ...bookmarkData,\n      category: result.category || undefined,\n      hasPasscode: !!passcodeHash,\n    };\n  }\n\n  async createBookmark(userId: string, bookmark: InsertBookmark): Promise<Bookmark & { hasPasscode?: boolean }> {\n    // Map client-facing 'passcode' to internal 'passcodeHash'\n    const { passcode, ...bookmarkWithoutPasscode } = bookmark;\n    let bookmarkData: InsertBookmarkInternal = {\n      ...bookmarkWithoutPasscode,\n      userId, // Add userId from authenticated user\n    };\n    \n    // Hash passcode if provided and not null/undefined\n    if (passcode && typeof passcode === 'string') {\n      bookmarkData.passcodeHash = await bcrypt.hash(passcode, 12);\n    } else if (passcode === null) {\n      // Explicitly set to null if passcode was null (remove passcode)\n      bookmarkData.passcodeHash = null;\n    }\n    \n    const [newBookmark] = await db\n      .insert(bookmarks)\n      .values(bookmarkData)\n      .returning();\n    \n    // Remove passcodeHash from response and add hasPasscode field\n    const { passcodeHash, ...bookmarkResponse } = newBookmark;\n    return {\n      ...bookmarkResponse,\n      hasPasscode: !!passcodeHash,\n    } as Bookmark & { hasPasscode?: boolean };\n  }\n\n  async updateBookmark(userId: string, id: number, bookmark: Partial<InsertBookmark>): Promise<Bookmark & { hasPasscode?: boolean }> {\n    // Map client-facing 'passcode' to internal 'passcodeHash'\n    const { passcode, ...bookmarkWithoutPasscode } = bookmark;\n    let updateData: Partial<InsertBookmarkInternal> = {\n      ...bookmarkWithoutPasscode,\n    };\n    \n    // Hash passcode if provided and not null/undefined\n    if (passcode !== undefined) {\n      if (passcode && typeof passcode === 'string') {\n        updateData.passcodeHash = await bcrypt.hash(passcode, 12);\n      } else if (passcode === null) {\n        // Explicitly set to null if passcode was null (remove passcode)\n        updateData.passcodeHash = null;\n      }\n    }\n    \n    const [updatedBookmark] = await db\n      .update(bookmarks)\n      .set(updateData)\n      .where(and(eq(bookmarks.id, id), eq(bookmarks.userId, userId)))\n      .returning();\n    \n    // Remove passcodeHash from response and add hasPasscode field\n    const { passcodeHash, ...bookmarkResponse } = updatedBookmark;\n    return {\n      ...bookmarkResponse,\n      hasPasscode: !!passcodeHash,\n    } as Bookmark & { hasPasscode?: boolean };\n  }\n\n  async deleteBookmark(userId: string, id: number): Promise<void> {\n    await db.delete(bookmarks).where(and(eq(bookmarks.id, id), eq(bookmarks.userId, userId)));\n  }\n\n  async verifyBookmarkPasscode(userId: string, id: number, passcode: string): Promise<boolean> {\n    const [bookmark] = await db.select({\n      passcodeHash: bookmarks.passcodeHash,\n    }).from(bookmarks).where(and(eq(bookmarks.id, id), eq(bookmarks.userId, userId)));\n    \n    if (!bookmark || !bookmark.passcodeHash) {\n      return false; // No bookmark found or no passcode set\n    }\n    \n    return await bcrypt.compare(passcode, bookmark.passcodeHash);\n  }\n\n  // Bulk operations\n  async bulkDeleteBookmarks(userId: string, ids: number[], passcodes?: Record<string, string>): Promise<{\n    deletedIds: number[];\n    failed: { id: number; reason: string }[];\n  }> {\n    const deletedIds: number[] = [];\n    const failed: { id: number; reason: string }[] = [];\n\n    if (ids.length === 0) {\n      return { deletedIds, failed };\n    }\n\n    // Get all bookmarks that belong to this user\n    const userBookmarks = await db.select({\n      id: bookmarks.id,\n      passcodeHash: bookmarks.passcodeHash,\n    }).from(bookmarks).where(and(\n      inArray(bookmarks.id, ids),\n      eq(bookmarks.userId, userId)\n    ));\n\n    // Create a map for quick lookup\n    const userBookmarkMap = new Map(userBookmarks.map(b => [b.id, b]));\n\n    // Process each bookmark ID\n    for (const id of ids) {\n      const bookmark = userBookmarkMap.get(id);\n      \n      if (!bookmark) {\n        failed.push({ id, reason: \"Bookmark not found or access denied\" });\n        continue;\n      }\n\n      // Check if bookmark is protected and requires passcode\n      if (bookmark.passcodeHash) {\n        const providedPasscode = passcodes?.[id.toString()];\n        \n        if (!providedPasscode || typeof providedPasscode !== 'string') {\n          failed.push({ id, reason: \"Passcode required for protected bookmark\" });\n          continue;\n        }\n\n        const isValidPasscode = await bcrypt.compare(providedPasscode, bookmark.passcodeHash);\n        if (!isValidPasscode) {\n          failed.push({ id, reason: \"Invalid passcode\" });\n          continue;\n        }\n      }\n\n      // If we get here, bookmark can be deleted\n      deletedIds.push(id);\n    }\n\n    // Perform bulk deletion for all successful IDs\n    if (deletedIds.length > 0) {\n      await db.delete(bookmarks).where(and(\n        inArray(bookmarks.id, deletedIds),\n        eq(bookmarks.userId, userId)\n      ));\n    }\n\n    return { deletedIds, failed };\n  }\n\n  async bulkMoveBookmarks(userId: string, ids: number[], categoryId: number | null, passcodes?: Record<string, string>): Promise<{\n    movedIds: number[];\n    failed: { id: number; reason: string }[];\n  }> {\n    const movedIds: number[] = [];\n    const failed: { id: number; reason: string }[] = [];\n\n    if (ids.length === 0) {\n      return { movedIds, failed };\n    }\n\n    // If categoryId is provided, verify it belongs to the user\n    if (categoryId !== null) {\n      const categoryExists = await this.getCategory(userId, categoryId);\n      if (!categoryExists) {\n        // All bookmarks fail with same reason\n        return {\n          movedIds: [],\n          failed: ids.map(id => ({ id, reason: \"Target category not found or access denied\" }))\n        };\n      }\n    }\n\n    // Get all bookmarks that belong to this user\n    const userBookmarks = await db.select({\n      id: bookmarks.id,\n      passcodeHash: bookmarks.passcodeHash,\n    }).from(bookmarks).where(and(\n      inArray(bookmarks.id, ids),\n      eq(bookmarks.userId, userId)\n    ));\n\n    // Create a map for quick lookup\n    const userBookmarkMap = new Map(userBookmarks.map(b => [b.id, b]));\n\n    // Process each bookmark ID\n    for (const id of ids) {\n      const bookmark = userBookmarkMap.get(id);\n      \n      if (!bookmark) {\n        failed.push({ id, reason: \"Bookmark not found or access denied\" });\n        continue;\n      }\n\n      // Check if bookmark is protected and requires passcode\n      if (bookmark.passcodeHash) {\n        const providedPasscode = passcodes?.[id.toString()];\n        \n        if (!providedPasscode || typeof providedPasscode !== 'string') {\n          failed.push({ id, reason: \"Passcode required for protected bookmark\" });\n          continue;\n        }\n\n        const isValidPasscode = await bcrypt.compare(providedPasscode, bookmark.passcodeHash);\n        if (!isValidPasscode) {\n          failed.push({ id, reason: \"Invalid passcode\" });\n          continue;\n        }\n      }\n\n      // If we get here, bookmark can be moved\n      movedIds.push(id);\n    }\n\n    // Perform bulk update for all successful IDs\n    if (movedIds.length > 0) {\n      await db.update(bookmarks)\n        .set({\n          categoryId,\n          updatedAt: new Date(),\n        })\n        .where(and(\n          inArray(bookmarks.id, movedIds),\n          eq(bookmarks.userId, userId)\n        ));\n    }\n\n    return { movedIds, failed };\n  }\n\n  // Category methods\n  async getCategories(userId: string): Promise<Category[]> {\n    return await db.select().from(categories).where(eq(categories.userId, userId)).orderBy(asc(categories.name));\n  }\n\n  async getCategoriesWithCounts(userId: string): Promise<(Category & { bookmarkCount: number })[]> {\n    const results = await db.select({\n      id: categories.id,\n      name: categories.name,\n      parentId: categories.parentId,\n      userId: categories.userId,\n      createdAt: categories.createdAt,\n      bookmarkCount: sql<number>`count(${bookmarks.id})::int`,\n    }).from(categories)\n    .leftJoin(bookmarks, and(eq(categories.id, bookmarks.categoryId), eq(bookmarks.userId, userId)))\n    .where(eq(categories.userId, userId))\n    .groupBy(categories.id)\n    .orderBy(asc(categories.name));\n\n    return results;\n  }\n\n  async getCategory(userId: string, id: number): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(and(eq(categories.id, id), eq(categories.userId, userId)));\n    return category || undefined;\n  }\n\n  async createCategory(userId: string, category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db\n      .insert(categories)\n      .values({\n        ...category,\n        userId, // Add userId from authenticated user\n      })\n      .returning();\n    return newCategory;\n  }\n\n  async updateCategory(userId: string, id: number, category: Partial<InsertCategory>): Promise<Category> {\n    const [updatedCategory] = await db\n      .update(categories)\n      .set(category)\n      .where(and(eq(categories.id, id), eq(categories.userId, userId)))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteCategory(userId: string, id: number): Promise<void> {\n    await db.delete(categories).where(and(eq(categories.id, id), eq(categories.userId, userId)));\n  }\n\n  // Stats methods\n  async getBookmarkStats(userId: string): Promise<{\n    total: number;\n    favorites: number;\n    categories: number;\n    tags: string[];\n    linkStats?: {\n      total: number;\n      working: number;\n      broken: number;\n      timeout: number;\n      unknown: number;\n    };\n  }> {\n    const [totalResult] = await db.select({\n      count: sql<number>`count(*)::int`,\n    }).from(bookmarks).where(eq(bookmarks.userId, userId));\n\n    const [favoritesResult] = await db.select({\n      count: sql<number>`count(*)::int`,\n    }).from(bookmarks).where(and(eq(bookmarks.isFavorite, true), eq(bookmarks.userId, userId)));\n\n    const [categoriesResult] = await db.select({\n      count: sql<number>`count(*)::int`,\n    }).from(categories).where(eq(categories.userId, userId));\n\n    // Get all unique tags for this user\n    const tagResults = await db.select({\n      tags: bookmarks.tags,\n    }).from(bookmarks).where(and(\n      eq(bookmarks.userId, userId),\n      sql`${bookmarks.tags} IS NOT NULL AND array_length(${bookmarks.tags}, 1) > 0`\n    ));\n\n    const allTags = new Set<string>();\n    tagResults.forEach(result => {\n      if (result.tags) {\n        result.tags.forEach(tag => allTags.add(tag));\n      }\n    });\n\n    // Get link status counts\n    const linkStatusResults = await db.select({\n      status: sql<string>`COALESCE(${bookmarks.linkStatus}, 'unknown')`,\n      count: sql<number>`count(*)::int`,\n    })\n    .from(bookmarks)\n    .where(eq(bookmarks.userId, userId))\n    .groupBy(sql`COALESCE(${bookmarks.linkStatus}, 'unknown')`);\n\n    const linkStats = {\n      total: totalResult.count,\n      working: 0,\n      broken: 0,\n      timeout: 0,\n      unknown: 0,\n    };\n\n    linkStatusResults.forEach(result => {\n      switch (result.status) {\n        case 'ok':\n          linkStats.working = result.count;\n          break;\n        case 'broken':\n          linkStats.broken = result.count;\n          break;\n        case 'timeout':\n          linkStats.timeout = result.count;\n          break;\n        case 'unknown':\n        default:\n          linkStats.unknown = result.count;\n          break;\n      }\n    });\n\n    return {\n      total: totalResult.count,\n      favorites: favoritesResult.count,\n      categories: categoriesResult.count,\n      tags: Array.from(allTags),\n      linkStats,\n    };\n  }\n\n  // User Preferences methods\n  async getUserPreferences(userId: string): Promise<UserPreferences | undefined> {\n    const [preferences] = await db.select().from(userPreferences).where(eq(userPreferences.userId, userId));\n    return preferences || undefined;\n  }\n\n  async updateUserPreferences(userId: string, preferences: Partial<InsertUserPreferences>): Promise<UserPreferences> {\n    // Check if preferences record exists for this user\n    const existingPreferences = await this.getUserPreferences(userId);\n    \n    if (existingPreferences) {\n      // Update existing record\n      const [updatedPreferences] = await db\n        .update(userPreferences)\n        .set({\n          ...preferences,\n          updatedAt: new Date(),\n        })\n        .where(eq(userPreferences.id, existingPreferences.id))\n        .returning();\n      return updatedPreferences;\n    } else {\n      // Create new record with defaults\n      const [newPreferences] = await db\n        .insert(userPreferences)\n        .values({\n          userId,\n          theme: preferences.theme || \"light\",\n          viewMode: preferences.viewMode || \"grid\",\n        })\n        .returning();\n      return newPreferences;\n    }\n  }\n\n  // Bookmark sharing methods\n  generateShareId(): string {\n    return crypto.randomUUID();\n  }\n\n  async setBookmarkSharing(userId: string, bookmarkId: number, isShared: boolean): Promise<Bookmark> {\n    // If enabling sharing, generate a shareId; if disabling, set to null\n    const shareId = isShared ? this.generateShareId() : null;\n    \n    const [updatedBookmark] = await db\n      .update(bookmarks)\n      .set({\n        isShared,\n        shareId,\n        updatedAt: new Date(),\n      })\n      .where(and(eq(bookmarks.id, bookmarkId), eq(bookmarks.userId, userId)))\n      .returning();\n    \n    if (!updatedBookmark) {\n      throw new Error('Bookmark not found');\n    }\n    \n    // Remove passcodeHash from response\n    const { passcodeHash, ...bookmarkResponse } = updatedBookmark;\n    return bookmarkResponse as Bookmark;\n  }\n\n  async getSharedBookmark(shareId: string): Promise<{ \n    name: string; \n    description: string | null; \n    url: string; \n    tags: string[] | null; \n    createdAt: Date;\n    category?: { name: string } | null;\n  } | undefined> {\n    const [result] = await db.select({\n      name: bookmarks.name,\n      description: bookmarks.description,\n      url: bookmarks.url,\n      tags: bookmarks.tags,\n      createdAt: bookmarks.createdAt,\n      categoryName: categories.name,\n    }).from(bookmarks)\n    .leftJoin(categories, eq(bookmarks.categoryId, categories.id))\n    .where(and(\n      eq(bookmarks.shareId, shareId),\n      eq(bookmarks.isShared, true)\n    ));\n\n    if (!result) return undefined;\n\n    return {\n      name: result.name,\n      description: result.description,\n      url: result.url,\n      tags: result.tags,\n      createdAt: result.createdAt,\n      category: result.categoryName ? { name: result.categoryName } : undefined,\n    };\n  }\n\n  // Auto-tagging methods\n  async updateBookmarkSuggestedTags(userId: string, bookmarkId: number, suggestedTags: string[]): Promise<Bookmark & { hasPasscode?: boolean }> {\n    const [updatedBookmark] = await db\n      .update(bookmarks)\n      .set({ \n        suggestedTags: suggestedTags,\n        updatedAt: new Date(),\n      })\n      .where(and(eq(bookmarks.id, bookmarkId), eq(bookmarks.userId, userId)))\n      .returning();\n\n    if (!updatedBookmark) {\n      throw new Error('Bookmark not found or access denied');\n    }\n\n    // Remove passcodeHash from response and add hasPasscode field\n    const { passcodeHash, ...bookmarkResponse } = updatedBookmark;\n    return {\n      ...bookmarkResponse,\n      hasPasscode: !!passcodeHash,\n    } as Bookmark & { hasPasscode?: boolean };\n  }\n\n  async acceptSuggestedTags(userId: string, bookmarkId: number, tagsToAccept: string[]): Promise<Bookmark & { hasPasscode?: boolean }> {\n    // First get the current bookmark to merge tags\n    const bookmark = await this.getBookmark(userId, bookmarkId);\n    if (!bookmark) {\n      throw new Error('Bookmark not found');\n    }\n\n    // Merge current tags with accepted suggested tags, removing duplicates\n    const currentTags = bookmark.tags || [];\n    const newTags = Array.from(new Set([...currentTags, ...tagsToAccept]));\n    \n    // Remove accepted tags from suggested tags\n    const remainingSuggestedTags = (bookmark.suggestedTags || []).filter(tag => !tagsToAccept.includes(tag));\n\n    const [updatedBookmark] = await db\n      .update(bookmarks)\n      .set({ \n        tags: newTags,\n        suggestedTags: remainingSuggestedTags,\n        updatedAt: new Date(),\n      })\n      .where(and(eq(bookmarks.id, bookmarkId), eq(bookmarks.userId, userId)))\n      .returning();\n\n    if (!updatedBookmark) {\n      throw new Error('Failed to update bookmark');\n    }\n\n    // Remove passcodeHash from response and add hasPasscode field\n    const { passcodeHash, ...bookmarkResponse } = updatedBookmark;\n    return {\n      ...bookmarkResponse,\n      hasPasscode: !!passcodeHash,\n    } as Bookmark & { hasPasscode?: boolean };\n  }\n\n  async generateAutoTags(url: string, name?: string, description?: string): Promise<string[]> {\n    const tags: Set<string> = new Set();\n\n    try {\n      // Parse URL for domain-based tags\n      const urlObj = new URL(url);\n      const domain = urlObj.hostname.toLowerCase();\n      const path = urlObj.pathname.toLowerCase();\n\n      // Domain-based tag mapping\n      const domainTagMap: Record<string, string[]> = {\n        'github.com': ['development', 'code', 'git', 'repository'],\n        'stackoverflow.com': ['programming', 'help', 'q&a', 'development'],\n        'youtube.com': ['video', 'entertainment', 'media'],\n        'youtu.be': ['video', 'entertainment', 'media'],\n        'medium.com': ['article', 'blog', 'writing'],\n        'dev.to': ['development', 'blog', 'programming'],\n        'reddit.com': ['social', 'community', 'discussion'],\n        'twitter.com': ['social', 'microblog'],\n        'x.com': ['social', 'microblog'],\n        'linkedin.com': ['professional', 'networking', 'career'],\n        'dribbble.com': ['design', 'ui', 'portfolio'],\n        'behance.net': ['design', 'portfolio', 'creative'],\n        'figma.com': ['design', 'ui', 'tool', 'collaboration'],\n        'notion.so': ['productivity', 'notes', 'tool'],\n        'google.com': ['search', 'tool'],\n        'docs.google.com': ['document', 'collaboration', 'productivity'],\n        'sheets.google.com': ['spreadsheet', 'data', 'productivity'],\n        'slides.google.com': ['presentation', 'slides', 'productivity'],\n        'wikipedia.org': ['reference', 'encyclopedia', 'knowledge'],\n        'mdn.mozilla.org': ['documentation', 'web', 'development'],\n        'w3schools.com': ['tutorial', 'web', 'development'],\n        'codepen.io': ['development', 'demo', 'frontend'],\n        'jsfiddle.net': ['development', 'demo', 'javascript'],\n        'npmjs.com': ['javascript', 'package', 'development'],\n        'pypi.org': ['python', 'package', 'development'],\n        'aws.amazon.com': ['cloud', 'infrastructure', 'aws'],\n        'azure.microsoft.com': ['cloud', 'infrastructure', 'azure'],\n        'cloud.google.com': ['cloud', 'infrastructure', 'gcp'],\n        'stripe.com': ['payment', 'api', 'fintech'],\n        'twilio.com': ['communication', 'api', 'sms'],\n        'shopify.com': ['ecommerce', 'store', 'business'],\n        'wordpress.com': ['blog', 'cms', 'website'],\n        'wix.com': ['website', 'builder', 'tool'],\n        'squarespace.com': ['website', 'builder', 'design'],\n        'canva.com': ['design', 'graphics', 'tool'],\n        'unsplash.com': ['photos', 'stock', 'images'],\n        'pexels.com': ['photos', 'stock', 'images'],\n        'fonts.google.com': ['fonts', 'typography', 'design'],\n        'hackernews.com': ['tech', 'news', 'startup'],\n        'news.ycombinator.com': ['tech', 'news', 'startup'],\n        'techcrunch.com': ['tech', 'news', 'startup'],\n        'arstechnica.com': ['tech', 'news'],\n        'theverge.com': ['tech', 'news', 'culture'],\n        'wired.com': ['tech', 'news', 'culture'],\n        'coursera.org': ['education', 'course', 'learning'],\n        'udemy.com': ['education', 'course', 'learning'],\n        'edx.org': ['education', 'course', 'learning'],\n        'khanacademy.org': ['education', 'learning', 'free'],\n        'freecodecamp.org': ['education', 'programming', 'free'],\n        'codecademy.com': ['education', 'programming', 'interactive'],\n      };\n\n      // Add domain-specific tags\n      for (const [domainPattern, domainTags] of Object.entries(domainTagMap)) {\n        if (domain.includes(domainPattern.replace('www.', '')) || domain === domainPattern) {\n          domainTags.forEach(tag => tags.add(tag));\n          break; // Only match the first domain pattern\n        }\n      }\n\n      // Path-based analysis for additional context\n      if (path.includes('/docs') || path.includes('/documentation')) {\n        tags.add('documentation');\n      }\n      if (path.includes('/api')) {\n        tags.add('api');\n      }\n      if (path.includes('/tutorial') || path.includes('/guide')) {\n        tags.add('tutorial');\n      }\n      if (path.includes('/blog')) {\n        tags.add('blog');\n      }\n      if (path.includes('/news')) {\n        tags.add('news');\n      }\n\n      // Technology-specific detection from URL and content\n      const techKeywords = {\n        'react': 'react',\n        'vue': 'vue',\n        'angular': 'angular',\n        'javascript': 'javascript',\n        'typescript': 'typescript',\n        'python': 'python',\n        'java': 'java',\n        'php': 'php',\n        'ruby': 'ruby',\n        'go': 'golang',\n        'rust': 'rust',\n        'swift': 'swift',\n        'kotlin': 'kotlin',\n        'docker': 'docker',\n        'kubernetes': 'kubernetes',\n        'aws': 'aws',\n        'azure': 'azure',\n        'gcp': 'gcp',\n        'mongodb': 'database',\n        'postgresql': 'database',\n        'mysql': 'database',\n        'redis': 'database',\n        'graphql': 'graphql',\n        'rest': 'api',\n        'node': 'nodejs',\n        'express': 'nodejs',\n        'next': 'nextjs',\n        'nuxt': 'nuxtjs',\n        'svelte': 'svelte',\n        'flutter': 'flutter',\n        'laravel': 'laravel',\n        'django': 'django',\n        'rails': 'rails',\n      };\n\n      const contentToAnalyze = `${url} ${name || ''} ${description || ''}`.toLowerCase();\n      for (const [keyword, tag] of Object.entries(techKeywords)) {\n        if (contentToAnalyze.includes(keyword)) {\n          tags.add(tag);\n        }\n      }\n\n      // Try to fetch metadata for additional context (with timeout)\n      try {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 4001); // 5 second timeout\n\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'User-Agent': 'Mozilla/5.0 (compatible; BookmarkBot/1.0)',\n          },\n          signal: controller.signal,\n        });\n\n        clearTimeout(timeoutId);\n\n        if (response.ok) {\n          const html = await response.text();\n          \n          // Extract title\n          const titleMatch = html.match(/<title[^>]*>([^<]+)<\\/title>/i);\n          const pageTitle = titleMatch?.[1]?.trim();\n\n          // Extract meta description\n          const descMatch = html.match(/<meta[^>]*name=['\"]description['\"][^>]*content=['\"]([^'\"]+)['\"][^>]*>/i);\n          const metaDescription = descMatch?.[1]?.trim();\n\n          // Extract meta keywords\n          const keywordsMatch = html.match(/<meta[^>]*name=['\"]keywords['\"][^>]*content=['\"]([^'\"]+)['\"][^>]*>/i);\n          const metaKeywords = keywordsMatch?.[1]?.trim();\n\n          // Analyze extracted content for additional tags\n          const metaContent = `${pageTitle || ''} ${metaDescription || ''} ${metaKeywords || ''}`.toLowerCase();\n          \n          // Content type detection\n          if (metaContent.includes('tutorial') || metaContent.includes('how to') || metaContent.includes('guide')) {\n            tags.add('tutorial');\n          }\n          if (metaContent.includes('video') || metaContent.includes('watch')) {\n            tags.add('video');\n          }\n          if (metaContent.includes('article') || metaContent.includes('blog')) {\n            tags.add('article');\n          }\n          if (metaContent.includes('tool') || metaContent.includes('app') || metaContent.includes('software')) {\n            tags.add('tool');\n          }\n          if (metaContent.includes('news') || metaContent.includes('breaking')) {\n            tags.add('news');\n          }\n          if (metaContent.includes('free') || metaContent.includes('open source')) {\n            tags.add('free');\n          }\n\n          // Check for more tech keywords in metadata\n          for (const [keyword, tag] of Object.entries(techKeywords)) {\n            if (metaContent.includes(keyword)) {\n              tags.add(tag);\n            }\n          }\n        }\n      } catch (fetchError) {\n        // Silently fail metadata fetching - we'll use URL-based tags\n        console.warn(`Failed to fetch metadata for ${url}:`, fetchError instanceof Error ? fetchError.message : 'Unknown error');\n      }\n\n      // Convert set to array and limit to reasonable number\n      const tagArray = Array.from(tags);\n      \n      // Return up to 8 tags, prioritizing more specific ones\n      return tagArray.slice(0, 8);\n\n    } catch (error) {\n      console.error('Error generating auto tags:', error);\n      // Return empty array if URL parsing or other errors occur\n      return [];\n    }\n  }\n\n  // Screenshot methods implementation\n  async triggerScreenshot(userId: string, bookmarkId: number): Promise<{ status: string; message: string }> {\n    try {\n      // Check if bookmark exists and belongs to user\n      const bookmark = await this.getBookmark(userId, bookmarkId);\n      if (!bookmark) {\n        return { status: 'error', message: 'Bookmark not found' };\n      }\n\n      // Check if screenshot is already being generated\n      if (bookmark.screenshotStatus === 'pending') {\n        return { status: 'pending', message: 'Screenshot generation already in progress' };\n      }\n\n      // Update status to pending\n      await db\n        .update(bookmarks)\n        .set({\n          screenshotStatus: 'pending',\n          screenshotUpdatedAt: new Date(),\n        })\n        .where(and(eq(bookmarks.id, bookmarkId), eq(bookmarks.userId, userId)));\n\n      // Start screenshot generation asynchronously\n      this.generateScreenshotAsync(bookmarkId, bookmark.url);\n\n      return { status: 'pending', message: 'Screenshot generation started' };\n    } catch (error) {\n      console.error('Error triggering screenshot:', error);\n      return { status: 'error', message: 'Failed to trigger screenshot generation' };\n    }\n  }\n\n  async updateScreenshotStatus(bookmarkId: number, status: string, url?: string): Promise<void> {\n    try {\n      const updateData: any = {\n        screenshotStatus: status,\n        screenshotUpdatedAt: new Date(),\n      };\n\n      if (url) {\n        updateData.screenshotUrl = url;\n      }\n\n      await db\n        .update(bookmarks)\n        .set(updateData)\n        .where(eq(bookmarks.id, bookmarkId));\n    } catch (error) {\n      console.error('Error updating screenshot status:', error);\n      throw error;\n    }\n  }\n\n  async getScreenshotStatus(userId: string, bookmarkId: number): Promise<{ status: string; screenshotUrl?: string; updatedAt?: Date } | undefined> {\n    try {\n      const [result] = await db\n        .select({\n          screenshotStatus: bookmarks.screenshotStatus,\n          screenshotUrl: bookmarks.screenshotUrl,\n          screenshotUpdatedAt: bookmarks.screenshotUpdatedAt,\n        })\n        .from(bookmarks)\n        .where(and(eq(bookmarks.id, bookmarkId), eq(bookmarks.userId, userId)));\n\n      if (!result) {\n        return undefined;\n      }\n\n      return {\n        status: result.screenshotStatus || 'idle',\n        screenshotUrl: result.screenshotUrl || undefined,\n        updatedAt: result.screenshotUpdatedAt || undefined,\n      };\n    } catch (error) {\n      console.error('Error getting screenshot status:', error);\n      return undefined;\n    }\n  }\n\n  // Private method to generate screenshot asynchronously\n  private async generateScreenshotAsync(bookmarkId: number, url: string): Promise<void> {\n    try {\n      // Validate URL to prevent SSRF attacks\n      const parsedUrl = new URL(url);\n      if (!['http:', 'https:'].includes(parsedUrl.protocol)) {\n        await this.updateScreenshotStatus(bookmarkId, 'failed');\n        return;\n      }\n\n      // Use Screenshot Machine API (free tier)\n      const screenshotUrl = `https://api.screenshotmachine.com?key=demo&url=${encodeURIComponent(url)}&dimension=1024x768&format=png`;\n      \n      // Test if the screenshot service is accessible with timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 4001); // 5 second timeout\n\n      const response = await fetch(screenshotUrl, {\n        method: 'HEAD', // Just check if the service responds\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (response.ok) {\n        // Screenshot service is available, use the full URL\n        await this.updateScreenshotStatus(bookmarkId, 'ready', screenshotUrl);\n      } else {\n        throw new Error('Screenshot service unavailable');\n      }\n    } catch (error) {\n      console.warn(`Screenshot generation failed for bookmark ${bookmarkId}:`, error instanceof Error ? error.message : 'Unknown error');\n      \n      // Fallback to a simple placeholder image service\n      try {\n        const fallbackUrl = `https://via.placeholder.com/300x200/4f46e5/ffffff?text=Screenshot+Unavailable`;\n        await this.updateScreenshotStatus(bookmarkId, 'ready', fallbackUrl);\n      } catch (fallbackError) {\n        console.error(`Fallback screenshot failed for bookmark ${bookmarkId}:`, fallbackError);\n        await this.updateScreenshotStatus(bookmarkId, 'failed');\n      }\n    }\n  }\n\n  // Link checking methods implementation\n  async checkBookmarkLink(userId: string, bookmarkId: number): Promise<{ linkStatus: string; httpStatus?: number; lastLinkCheckAt: Date }> {\n    try {\n      // Check if bookmark exists and belongs to user\n      const bookmark = await this.getBookmark(userId, bookmarkId);\n      if (!bookmark) {\n        throw new Error('Bookmark not found');\n      }\n\n      // Check if bookmark is in backoff period (for manual checks)\n      const currentFailCount = bookmark.linkFailCount || 0;\n      if (currentFailCount > 0 && bookmark.lastLinkCheckAt) {\n        const backoffMinutes = this.calculateBackoffMinutes(currentFailCount);\n        const backoffEndTime = new Date(bookmark.lastLinkCheckAt.getTime() + backoffMinutes * 60 * 1000);\n        \n        if (new Date() < backoffEndTime) {\n          console.warn(`Bookmark ${bookmarkId} is in backoff period until ${backoffEndTime.toISOString()} (${currentFailCount} failures)`);\n          // Return current status without checking\n          return {\n            linkStatus: bookmark.linkStatus || 'unknown',\n            httpStatus: bookmark.httpStatus || undefined,\n            lastLinkCheckAt: bookmark.lastLinkCheckAt,\n          };\n        }\n      }\n\n      console.log(`Checking link for bookmark ${bookmarkId}: ${bookmark.url} (${currentFailCount} previous failures)`);\n      const result = await this.performLinkCheck(bookmark.url);\n      \n      // Calculate new fail count with exponential backoff logic\n      let newFailCount: number;\n      if (result.linkStatus === 'ok') {\n        newFailCount = 0; // Reset on success\n        console.log(`âœ“ Link check successful for bookmark ${bookmarkId}: ${result.httpStatus}`);\n      } else {\n        newFailCount = currentFailCount + 1;\n        const nextCheckIn = this.calculateBackoffMinutes(newFailCount);\n        console.warn(`âœ— Link check failed for bookmark ${bookmarkId}: ${result.linkStatus} (${result.httpStatus || 'N/A'}). Next check in ${nextCheckIn} minutes (${newFailCount} total failures)`);\n      }\n      \n      // Update the bookmark with link check results\n      await this.updateLinkStatus(\n        bookmarkId, \n        result.linkStatus, \n        result.httpStatus, \n        newFailCount\n      );\n\n      return {\n        linkStatus: result.linkStatus,\n        httpStatus: result.httpStatus,\n        lastLinkCheckAt: new Date(),\n      };\n    } catch (error) {\n      console.error(`Error checking link for bookmark ${bookmarkId}:`, error);\n      \n      // Increment fail count on error\n      const bookmark = await this.getBookmark(userId, bookmarkId);\n      const newFailCount = (bookmark?.linkFailCount || 0) + 1;\n      console.warn(`Link check error for bookmark ${bookmarkId}, incrementing fail count to ${newFailCount}`);\n      \n      // Update with error status and incremented fail count\n      await this.updateLinkStatus(bookmarkId, 'broken', undefined, newFailCount);\n      \n      throw error;\n    }\n  }\n\n  async bulkCheckBookmarkLinks(userId: string, bookmarkIds?: number[]): Promise<{\n    checkedIds: number[];\n    failed: { id: number; reason: string }[];\n  }> {\n    try {\n      let bookmarksToCheck;\n      \n      if (bookmarkIds && bookmarkIds.length > 0) {\n        // Check specific bookmarks\n        bookmarksToCheck = [];\n        for (const id of bookmarkIds) {\n          const bookmark = await this.getBookmark(userId, id);\n          if (bookmark) {\n            bookmarksToCheck.push({ id: bookmark.id, url: bookmark.url, linkFailCount: bookmark.linkFailCount || 0 });\n          }\n        }\n      } else {\n        // Check all user's bookmarks\n        const userBookmarks = await this.getBookmarks(userId);\n        bookmarksToCheck = userBookmarks.map(b => ({ \n          id: b.id, \n          url: b.url, \n          linkFailCount: b.linkFailCount || 0 \n        }));\n      }\n\n      const checkedIds: number[] = [];\n      const failed: { id: number; reason: string }[] = [];\n\n      // Process bookmarks with concurrency control (max 5 at a time)\n      const concurrencyLimit = 5;\n      for (let i = 0; i < bookmarksToCheck.length; i += concurrencyLimit) {\n        const batch = bookmarksToCheck.slice(i, i + concurrencyLimit);\n        \n        const batchPromises = batch.map(async (bookmark) => {\n          try {\n            const result = await this.performLinkCheck(bookmark.url);\n            \n            await this.updateLinkStatus(\n              bookmark.id,\n              result.linkStatus,\n              result.httpStatus,\n              result.linkStatus === 'ok' ? 0 : bookmark.linkFailCount + 1\n            );\n            \n            checkedIds.push(bookmark.id);\n          } catch (error) {\n            console.error(`Error checking link for bookmark ${bookmark.id}:`, error);\n            failed.push({ \n              id: bookmark.id, \n              reason: error instanceof Error ? error.message : 'Unknown error' \n            });\n            \n            // Still update with error status\n            await this.updateLinkStatus(bookmark.id, 'broken', undefined, bookmark.linkFailCount + 1);\n          }\n        });\n\n        await Promise.allSettled(batchPromises);\n        \n        // Small delay between batches to be respectful\n        if (i + concurrencyLimit < bookmarksToCheck.length) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n\n      return { checkedIds, failed };\n    } catch (error) {\n      console.error('Error in bulk link checking:', error);\n      throw error;\n    }\n  }\n\n  async updateLinkStatus(bookmarkId: number, linkStatus: string, httpStatus?: number, linkFailCount?: number): Promise<void> {\n    try {\n      const updateData: any = {\n        linkStatus,\n        lastLinkCheckAt: new Date(),\n      };\n\n      if (httpStatus !== undefined) {\n        updateData.httpStatus = httpStatus;\n      }\n\n      if (linkFailCount !== undefined) {\n        updateData.linkFailCount = linkFailCount;\n      }\n\n      await db\n        .update(bookmarks)\n        .set(updateData)\n        .where(eq(bookmarks.id, bookmarkId));\n    } catch (error) {\n      console.error(`Error updating link status for bookmark ${bookmarkId}:`, error);\n      throw error;\n    }\n  }\n\n  async getBookmarksForLinkCheck(limit: number, userId?: string): Promise<{ id: number; url: string; lastLinkCheckAt: Date | null; linkFailCount?: number | null }[]> {\n    try {\n      const conditions = [];\n      \n      if (userId) {\n        conditions.push(eq(bookmarks.userId, userId));\n      }\n\n      // Implement exponential backoff - prioritize bookmarks that:\n      // 1. Have never been checked (NULL lastLinkCheckAt)\n      // 2. Have low or zero fail counts\n      // 3. Haven't been checked recently (but respect backoff for failing URLs)\n      const currentTime = new Date();\n      \n      const query = db\n        .select({\n          id: bookmarks.id,\n          url: bookmarks.url,\n          lastLinkCheckAt: bookmarks.lastLinkCheckAt,\n          linkFailCount: bookmarks.linkFailCount,\n        })\n        .from(bookmarks)\n        .where(and(\n          conditions.length > 0 ? and(...conditions) : undefined,\n          // Only include URLs that are ready for checking based on exponential backoff\n          or(\n            // Never been checked\n            isNull(bookmarks.lastLinkCheckAt),\n            // Or passed the backoff period based on fail count\n            sql`${bookmarks.lastLinkCheckAt} + \n                INTERVAL '${this.calculateBackoffMinutes(0)}' MINUTE * \n                POWER(2, COALESCE(${bookmarks.linkFailCount}, 0)) < NOW()`\n          )\n        ))\n        .orderBy(\n          // Prioritize by fail count (lower first), then by last check time\n          asc(sql`COALESCE(${bookmarks.linkFailCount}, 0)`),\n          sql`CASE WHEN ${bookmarks.lastLinkCheckAt} IS NULL THEN 0 ELSE 1 END`,\n          asc(bookmarks.lastLinkCheckAt)\n        )\n        .limit(limit);\n\n      return await query;\n    } catch (error) {\n      console.error('Error getting bookmarks for link check:', error);\n      return [];\n    }\n  }\n\n  // Calculate exponential backoff minutes based on fail count\n  private calculateBackoffMinutes(failCount: number): number {\n    // Base backoff: 30 minutes\n    // Exponential backoff: 30min, 1hr, 2hr, 4hr, 8hr, 16hr, max 24hr\n    const baseMinutes = 30;\n    const maxMinutes = 24 * 60; // 24 hours\n    const backoffMinutes = baseMinutes * Math.pow(2, Math.min(failCount, 5)); // Cap at 2^5 = 32x\n    return Math.min(backoffMinutes, maxMinutes);\n  }\n\n  // Private method to perform the actual link checking\n  private async performLinkCheck(url: string): Promise<{ linkStatus: string; httpStatus?: number }> {\n    try {\n      // Use the comprehensive SSRF-safe validation from the link checker service\n      // This ensures consistent security across all link checking operations\n      const validation = await this.validateUrlForSsrf(url);\n      if (!validation.valid) {\n        console.warn(`Link check blocked for security: ${validation.reason} - URL: ${url}`);\n        return { linkStatus: 'broken', httpStatus: undefined };\n      }\n\n      // Create abort controller for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n\n      try {\n        let redirectCount = 0;\n        let currentUrl = url;\n        let response: Response;\n        const maxRedirects = 5;\n        const maxContentLength = 1024 * 1024 * 10; // 10MB limit\n\n        // Custom fetch with redirect limit and content length checking\n        const fetchWithLimits = async (fetchUrl: string, method: 'HEAD' | 'GET') => {\n          const fetchResponse = await fetch(fetchUrl, {\n            method,\n            headers: {\n              'User-Agent': 'Mozilla/5.0 (compatible; BookmarkBot/1.0; +bookmark-checker)',\n              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n              'Accept-Language': 'en-US,en;q=0.5',\n              'Accept-Encoding': 'gzip, deflate',\n              'DNT': '1',\n              'Connection': 'close',\n              'Upgrade-Insecure-Requests': '1',\n            },\n            signal: controller.signal,\n            redirect: 'manual', // Handle redirects manually for better control\n          });\n          \n          // Check content length if available\n          const contentLength = fetchResponse.headers.get('content-length');\n          if (contentLength && parseInt(contentLength, 10) > maxContentLength) {\n            throw new Error(`Content too large: ${contentLength} bytes`);\n          }\n          \n          return fetchResponse;\n        };\n\n        // Try HEAD request first (faster), handle redirects manually\n        response = await fetchWithLimits(currentUrl, 'HEAD');\n        \n        // Handle redirects manually with limits\n        while (response.status >= 300 && response.status < 400 && redirectCount < maxRedirects) {\n          const location = response.headers.get('location');\n          if (!location) {\n            break;\n          }\n          \n          // Validate redirect URL for SSRF\n          const redirectUrl = new URL(location, currentUrl).toString();\n          const redirectValidation = await this.validateUrlForSsrf(redirectUrl);\n          if (!redirectValidation.valid) {\n            console.warn(`Redirect blocked for security: ${redirectValidation.reason} - Redirect URL: ${redirectUrl}`);\n            return { linkStatus: 'broken', httpStatus: response.status };\n          }\n          \n          redirectCount++;\n          currentUrl = redirectUrl;\n          response = await fetchWithLimits(currentUrl, 'HEAD');\n        }\n        \n        // If we hit redirect limit, return broken\n        if (redirectCount >= maxRedirects && response.status >= 300 && response.status < 400) {\n          console.warn(`Too many redirects (${redirectCount}) for URL: ${url}`);\n          return { linkStatus: 'broken', httpStatus: response.status };\n        }\n\n        // If HEAD fails with 405 (Method Not Allowed), try GET\n        if (response.status === 405) {\n          response = await fetchWithLimits(currentUrl, 'GET');\n        }\n\n        clearTimeout(timeoutId);\n\n        // Classify status\n        const status = response.status;\n        if (status >= 200 && status < 300) {\n          return { linkStatus: 'ok', httpStatus: status };\n        } else if (status >= 400) {\n          return { linkStatus: 'broken', httpStatus: status };\n        } else {\n          // 3xx codes that we couldn't follow should be considered OK if valid\n          return { linkStatus: 'ok', httpStatus: status };\n        }\n      } catch (fetchError) {\n        clearTimeout(timeoutId);\n        \n        if (fetchError instanceof Error) {\n          if (fetchError.name === 'AbortError') {\n            return { linkStatus: 'timeout', httpStatus: undefined };\n          }\n          \n          // Log security-related errors differently\n          if (fetchError.message.includes('Content too large')) {\n            console.warn(`Content size limit exceeded for URL: ${url}`);\n            return { linkStatus: 'broken', httpStatus: undefined };\n          }\n        }\n        \n        // Network errors, DNS failures, etc.\n        console.warn(`Network error for URL ${url}:`, fetchError);\n        return { linkStatus: 'broken', httpStatus: undefined };\n      }\n    } catch (error) {\n      // Invalid URL format or validation error\n      console.warn(`URL validation/parsing error for ${url}:`, error);\n      return { linkStatus: 'broken', httpStatus: undefined };\n    }\n  }\n\n  // Add the same comprehensive SSRF validation from link checker service\n  private async validateUrlForSsrf(url: string): Promise<{ valid: boolean; reason?: string }> {\n    const { URL } = await import('url');\n    const dns = await import('dns');\n    const { promisify } = await import('util');\n    \n    const dnsLookup = promisify(dns.lookup);\n    \n    const isPrivateIP = (ip: string): boolean => {\n      const parts = ip.split('.').map(Number);\n      if (parts.length !== 4 || parts.some(part => isNaN(part) || part < 0 || part > 255)) {\n        return true; // Invalid IP, consider it private for safety\n      }\n      \n      // IPv4 private ranges\n      if (parts[0] === 10) return true; // 10.0.0.0/8\n      if (parts[0] === 172 && parts[1] >= 16 && parts[1] <= 31) return true; // 172.16.0.0/12\n      if (parts[0] === 192 && parts[1] === 168) return true; // 192.168.0.0/16\n      if (parts[0] === 127) return true; // 127.0.0.0/8 (localhost)\n      if (parts[0] === 169 && parts[1] === 254) return true; // 169.254.0.0/16 (link-local)\n      if (parts[0] === 224) return true; // 224.0.0.0/4 (multicast)\n      if (parts[0] >= 240) return true; // 240.0.0.0/4 (reserved)\n      \n      return false;\n    };\n    \n    const isPrivateIPv6 = (ip: string): boolean => {\n      if (ip === '::1') return true;\n      if (ip.startsWith('fc') || ip.startsWith('fd')) return true;\n      if (ip.startsWith('fe80:')) return true;\n      if (ip.startsWith('::ffff:')) {\n        const ipv4Part = ip.substring(7);\n        return isPrivateIP(ipv4Part);\n      }\n      return false;\n    };\n    \n    const isBlockedHostname = (hostname: string): boolean => {\n      const blocked = [\n        'localhost', '127.0.0.1', '::1', '0.0.0.0',\n        'metadata.google.internal', '169.254.169.254',\n        'metadata.azure.com', 'metadata.packet.net'\n      ];\n      return blocked.includes(hostname.toLowerCase());\n    };\n\n    try {\n      const parsedUrl = new URL(url);\n      \n      // Protocol validation\n      if (!['http:', 'https:'].includes(parsedUrl.protocol)) {\n        return { \n          valid: false, \n          reason: `Blocked protocol: ${parsedUrl.protocol}. Only HTTP and HTTPS are allowed.` \n        };\n      }\n\n      // Hostname validation\n      const hostname = parsedUrl.hostname.toLowerCase();\n      if (isBlockedHostname(hostname)) {\n        console.warn(`SSRF attempt blocked: ${hostname} from URL ${url}`);\n        return { valid: false, reason: `Blocked hostname: ${hostname}` };\n      }\n\n      // DNS lookup and IP validation\n      try {\n        const { address, family } = await dnsLookup(hostname);\n        if (family === 4 && isPrivateIP(address)) {\n          console.warn(`SSRF attempt blocked: Private IPv4 ${address} for hostname ${hostname}`);\n          return { valid: false, reason: `Blocked private IPv4 address: ${address}` };\n        }\n        if (family === 6 && isPrivateIPv6(address)) {\n          console.warn(`SSRF attempt blocked: Private IPv6 ${address} for hostname ${hostname}`);\n          return { valid: false, reason: `Blocked private IPv6 address: ${address}` };\n        }\n      } catch (dnsError) {\n        console.warn(`DNS lookup failed for ${hostname}:`, dnsError);\n        return { valid: false, reason: 'DNS lookup failed - invalid or unreachable hostname' };\n      }\n\n      // Port validation\n      const port = parsedUrl.port;\n      if (port) {\n        const portNum = parseInt(port, 10);\n        const blockedPorts = [22, 23, 25, 53, 135, 139, 445, 993, 995, 1433, 3306, 3389, 5432, 5984, 6379, 8080, 9200, 27017];\n        if (blockedPorts.includes(portNum)) {\n          console.warn(`SSRF attempt blocked: Dangerous port ${portNum} for URL ${url}`);\n          return { valid: false, reason: `Blocked port: ${portNum}` };\n        }\n      }\n\n      return { valid: true };\n    } catch (error) {\n      console.warn(`URL validation error for ${url}:`, error);\n      return { valid: false, reason: 'Invalid URL format' };\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n",
      "size_bytes": 57948
    },
    "server/vite.ts": {
      "content": "import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n",
      "size_bytes": 2263
    },
    "shared/schema.ts": {
      "content": "import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User schema (moved up to be defined before it's referenced)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// User Preferences schema (moved up to be defined before it's referenced)\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  userId: varchar(\"user_id\").notNull(),\n  theme: varchar(\"theme\", { length: 10 }).notNull().default(\"light\"),\n  viewMode: varchar(\"view_mode\", { length: 10 }).notNull().default(\"grid\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  parentId: integer(\"parent_id\"),\n  userId: varchar(\"user_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const bookmarks = pgTable(\"bookmarks\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  url: text(\"url\").notNull(),\n  tags: text(\"tags\").array().default([]),\n  suggestedTags: text(\"suggested_tags\").array().default([]),\n  isFavorite: boolean(\"is_favorite\").default(false),\n  categoryId: integer(\"category_id\"),\n  userId: varchar(\"user_id\").notNull(),\n  passcodeHash: text(\"passcode_hash\"),\n  isShared: boolean(\"is_shared\").default(false),\n  shareId: varchar(\"share_id\", { length: 36 }).unique(),\n  screenshotUrl: text(\"screenshot_url\"),\n  screenshotStatus: varchar(\"screenshot_status\", { length: 16 }).default(\"idle\"),\n  screenshotUpdatedAt: timestamp(\"screenshot_updated_at\"),\n  linkStatus: varchar(\"link_status\", { length: 16 }).default(\"unknown\"),\n  httpStatus: integer(\"http_status\"),\n  lastLinkCheckAt: timestamp(\"last_link_check_at\"),\n  linkFailCount: integer(\"link_fail_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const categoriesRelations = relations(categories, ({ one, many }) => ({\n  user: one(users, {\n    fields: [categories.userId],\n    references: [users.id],\n  }),\n  parent: one(categories, {\n    fields: [categories.parentId],\n    references: [categories.id],\n  }),\n  children: many(categories),\n  bookmarks: many(bookmarks),\n}));\n\nexport const bookmarksRelations = relations(bookmarks, ({ one }) => ({\n  user: one(users, {\n    fields: [bookmarks.userId],\n    references: [users.id],\n  }),\n  category: one(categories, {\n    fields: [bookmarks.categoryId],\n    references: [categories.id],\n  }),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  bookmarks: many(bookmarks),\n  categories: many(categories),\n  preferences: one(userPreferences, {\n    fields: [users.id],\n    references: [userPreferences.userId],\n  }),\n}));\n\nexport const userPreferencesRelations = relations(userPreferences, ({ one }) => ({\n  user: one(users, {\n    fields: [userPreferences.userId],\n    references: [users.id],\n  }),\n}));\n\n// Schemas\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n  userId: true, // userId will be added server-side from authenticated user\n});\n\n// Client-facing bookmark schemas (using 'passcode' instead of 'passcodeHash')\nexport const insertBookmarkSchema = createInsertSchema(bookmarks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  userId: true, // userId will be added server-side from authenticated user\n  passcodeHash: true, // Exclude internal hash field from client API\n  suggestedTags: true, // Server-managed auto-tagging\n  screenshotUrl: true, // Server-managed screenshot functionality\n  screenshotStatus: true, // Server-managed screenshot status\n  screenshotUpdatedAt: true, // Server-managed timestamp\n  linkStatus: true, // Server-managed link checking\n  httpStatus: true, // Server-managed HTTP status\n  lastLinkCheckAt: true, // Server-managed timestamp\n  linkFailCount: true, // Server-managed failure counter\n}).extend({\n  // Add client-facing passcode field with validation\n  passcode: z.string()\n    .min(4, \"Passcode must be at least 4 characters long\")\n    .max(64, \"Passcode must be no more than 64 characters long\")\n    .transform(val => val === \"\" ? null : val) // Transform empty string to null\n    .nullable()\n    .optional(),\n});\n\n// Internal server-side schema that includes the passcodeHash field\nexport const insertBookmarkInternalSchema = createInsertSchema(bookmarks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertBookmark = z.infer<typeof insertBookmarkSchema>;\nexport type InsertBookmarkInternal = z.infer<typeof insertBookmarkInternalSchema>;\nexport type Bookmark = Omit<typeof bookmarks.$inferSelect, 'passcodeHash'>; // Remove passcodeHash from public type\n\n// User and preferences types/schemas (tables already defined above)\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  userId: true, // userId will be added server-side from authenticated user\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUserPreferences = z.infer<typeof insertUserPreferencesSchema>;\nexport type UserPreferences = typeof userPreferences.$inferSelect;\n",
      "size_bytes": 6085
    },
    "client/src/App.tsx": {
      "content": "import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Bookmarks from \"@/pages/bookmarks\";\nimport AuthPage from \"@/pages/auth-page\";\nimport NotFound from \"@/pages/not-found\";\nimport { SharedBookmark } from \"@/pages/shared-bookmark\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={Bookmarks} />\n      <ProtectedRoute path=\"/favorites\" component={Bookmarks} />\n      <ProtectedRoute path=\"/category/:id\" component={Bookmarks} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/shared/:shareId\" component={SharedBookmark} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n",
      "size_bytes": 1229
    },
    "client/src/index.css": {
      "content": "@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(24.6, 95%, 53.1%);\n  --accent-foreground: hsl(60, 9.1%, 97.8%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(24.6, 95%, 53.1%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground transition-colors duration-300;\n  }\n\n  /* Hide scrollbars globally */\n  * {\n    scrollbar-width: none; /* Firefox */\n    -ms-overflow-style: none; /* Internet Explorer 10+ */\n  }\n  \n  *::-webkit-scrollbar {\n    display: none; /* Safari and Chrome */\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .animate-slide-in {\n    animation: slideIn 0.3s ease-out forwards;\n  }\n\n  @keyframes slideIn {\n    from {\n      transform: translateX(100%);\n      opacity: 0;\n    }\n    to {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  }\n}\n",
      "size_bytes": 3640
    },
    "client/src/main.tsx": {
      "content": "import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n",
      "size_bytes": 157
    },
    "client/src/components/add-bookmark-modal.tsx": {
      "content": "import { useState, useEffect, useCallback } from \"react\";\nimport { X, Plus, Lock, Sparkles, Check } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { insertBookmarkSchema } from \"@shared/schema\";\nimport type { InsertBookmark, Category, Bookmark } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MarkdownEditor } from \"@/components/markdown-editor\";\n\n// Create a permissive validation schema - detailed validation is handled in onSubmit\nconst createFormSchema = () => {\n  return insertBookmarkSchema.extend({\n    tagInput: z.string().optional(),\n    passcode: z.string().optional(), // Make passcode always optional at form level\n  }).omit({ passcode: true }).extend({\n    passcode: z.string().optional().refine((val) => {\n      // Only validate length if passcode is provided\n      return !val || val.trim().length >= 4;\n    }, {\n      message: \"Passcode must be at least 4 characters long if provided\"\n    })\n  });\n};\n\ntype FormData = z.infer<typeof insertBookmarkSchema> & { tagInput?: string };\n\ninterface AddBookmarkModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingBookmark?: any;\n}\n\nexport function AddBookmarkModal({ isOpen, onClose, editingBookmark }: AddBookmarkModalProps) {\n  const [tags, setTags] = useState<string[]>(editingBookmark?.tags || []);\n  const [tagInput, setTagInput] = useState(\"\");\n  const [isProtected, setIsProtected] = useState(false);\n  const [suggestedTags, setSuggestedTags] = useState<string[]>([]);\n  const [isGeneratingSuggestions, setIsGeneratingSuggestions] = useState(false);\n  const [autoTagsGenerated, setAutoTagsGenerated] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(createFormSchema()),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      url: \"\",\n      categoryId: undefined,\n      isFavorite: false,\n      tags: [],\n      tagInput: \"\",\n      passcode: \"\",\n    },\n  });\n\n  // Clear passcode errors when protection state changes\n  useEffect(() => {\n    if (!isProtected && form.formState.errors.passcode) {\n      form.clearErrors(\"passcode\");\n    }\n  }, [isProtected, form]);\n\n  // Reset form when editingBookmark changes\n  useEffect(() => {\n    if (editingBookmark) {\n      // Check if bookmark has existing passcode protection\n      const hasPasscode = editingBookmark.hasPasscode || false;\n      setIsProtected(hasPasscode);\n      \n      form.reset({\n        name: editingBookmark.name || \"\",\n        description: editingBookmark.description || \"\",\n        url: editingBookmark.url || \"\",\n        categoryId: editingBookmark.categoryId || undefined,\n        isFavorite: editingBookmark.isFavorite || false,\n        tags: editingBookmark.tags || [],\n        tagInput: \"\",\n        passcode: \"\", // Always start with empty passcode for security\n      });\n      setTags(editingBookmark.tags || []);\n      setSuggestedTags((editingBookmark as any)?.suggestedTags || []);\n      setAutoTagsGenerated(!!((editingBookmark as any)?.suggestedTags?.length));\n    } else {\n      setIsProtected(false);\n      form.reset({\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        categoryId: undefined,\n        isFavorite: false,\n        tags: [],\n        tagInput: \"\",\n        passcode: \"\",\n      });\n      setTags([]);\n      setSuggestedTags([]);\n      setAutoTagsGenerated(false);\n    }\n  }, [editingBookmark, form]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertBookmark) => {\n      const url = editingBookmark \n        ? `/api/bookmarks/${editingBookmark.id}`\n        : \"/api/bookmarks\";\n      const method = editingBookmark ? \"PATCH\" : \"POST\";\n      return await apiRequest(method, url, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries();\n      queryClient.refetchQueries();\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        description: editingBookmark \n          ? \"Bookmark updated successfully!\" \n          : \"Bookmark saved successfully!\",\n      });\n      handleClose();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to save bookmark\",\n      });\n    }\n  });\n\n  // Auto-tagging mutations\n  const generateAutoTagsMutation = useMutation({\n    mutationFn: async ({ bookmarkId, passcode }: { bookmarkId?: number; passcode?: string }) => {\n      if (bookmarkId) {\n        // For existing bookmarks\n        return await apiRequest(\"POST\", `/api/bookmarks/${bookmarkId}/auto-tags`, { passcode });\n      } else {\n        // For new bookmarks, use the URL, name and description directly\n        const currentUrl = form.getValues(\"url\");\n        const currentName = form.getValues(\"name\");\n        const currentDescription = form.getValues(\"description\");\n        \n        if (!currentUrl) {\n          throw new Error(\"URL is required to generate tag suggestions\");\n        }\n        \n        // Call generateAutoTags directly from storage (we'll simulate with the existing endpoint)\n        // For now, we'll create a temporary bookmark to get suggestions\n        const response = await fetch('/api/bookmarks/preview-auto-tags', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            url: currentUrl,\n            name: currentName || '',\n            description: currentDescription || ''\n          })\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to generate tag suggestions');\n        }\n        \n        return await response.json();\n      }\n    },\n    onSuccess: (data: any) => {\n      const suggestions = data.suggestedTags || [];\n      setSuggestedTags(suggestions);\n      setAutoTagsGenerated(true);\n      toast({\n        description: `Generated ${suggestions.length} tag suggestions${suggestions.length === 0 ? ' (none found)' : ''}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to generate tag suggestions\",\n      });\n    },\n  });\n\n  const acceptSuggestedTagsMutation = useMutation({\n    mutationFn: async ({ bookmarkId, tags, passcode }: { bookmarkId: number; tags: string[]; passcode?: string }) => {\n      return await apiRequest(\"PATCH\", `/api/bookmarks/${bookmarkId}/tags/accept`, { tags, passcode });\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookmarks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        description: \"Tags accepted successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to accept suggested tags\",\n      });\n    },\n  });\n\n  // Debounced URL detection for auto-tagging\n  const debouncedGenerateAutoTags = useCallback(\n    (() => {\n      let timeoutId: NodeJS.Timeout;\n      return () => {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          const currentUrl = form.getValues(\"url\");\n          if (currentUrl && !editingBookmark && !autoTagsGenerated) {\n            try {\n              new URL(currentUrl); // Validate URL\n              setIsGeneratingSuggestions(true);\n              generateAutoTagsMutation.mutate({ passcode: isProtected ? (form.getValues(\"passcode\") || undefined) : undefined });\n            } catch {\n              // Invalid URL, don't generate suggestions\n            }\n          }\n        }, 1500); // 1.5 second debounce\n      };\n    })(),\n    [form, editingBookmark, autoTagsGenerated, generateAutoTagsMutation, isProtected]\n  );\n\n  // Watch URL changes for auto-tagging\n  useEffect(() => {\n    if (!editingBookmark) {\n      debouncedGenerateAutoTags();\n    }\n  }, [form.watch(\"url\"), debouncedGenerateAutoTags, editingBookmark]);\n\n  // Reset loading state when mutation completes\n  useEffect(() => {\n    if (!generateAutoTagsMutation.isPending) {\n      setIsGeneratingSuggestions(false);\n    }\n  }, [generateAutoTagsMutation.isPending]);\n\n  const handleClose = () => {\n    form.reset();\n    setTags([]);\n    setTagInput(\"\");\n    setIsProtected(false);\n    setSuggestedTags([]);\n    setAutoTagsGenerated(false);\n    setIsGeneratingSuggestions(false);\n    onClose();\n  };\n\n  const handleAddTag = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && tagInput.trim()) {\n      e.preventDefault();\n      const newTag = tagInput.trim();\n      if (!tags.includes(newTag)) {\n        setTags([...tags, newTag]);\n      }\n      setTagInput(\"\");\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    setTags(tags.filter(tag => tag !== tagToRemove));\n  };\n\n  // Handle manual tag suggestions\n  const handleGenerateSuggestions = () => {\n    const currentUrl = form.getValues(\"url\");\n    if (!currentUrl) {\n      toast({\n        variant: \"destructive\",\n        description: \"Please enter a URL first to generate tag suggestions\",\n      });\n      return;\n    }\n\n    try {\n      new URL(currentUrl); // Validate URL\n      setIsGeneratingSuggestions(true);\n      const passcode = isProtected ? (form.getValues(\"passcode\") || undefined) : undefined;\n      generateAutoTagsMutation.mutate({ \n        bookmarkId: editingBookmark?.id, \n        passcode \n      });\n    } catch {\n      toast({\n        variant: \"destructive\",\n        description: \"Please enter a valid URL to generate tag suggestions\",\n      });\n    }\n  };\n\n  // Handle accepting individual suggested tags\n  const handleAcceptSuggestedTag = (tagToAccept: string) => {\n    if (editingBookmark) {\n      // For existing bookmarks, use the API\n      const passcode = isProtected ? (form.getValues(\"passcode\") || undefined) : undefined;\n      acceptSuggestedTagsMutation.mutate({ \n        bookmarkId: editingBookmark.id, \n        tags: [tagToAccept], \n        passcode \n      });\n    } else {\n      // For new bookmarks, add to local state\n      if (!tags.includes(tagToAccept)) {\n        setTags(prev => [...prev, tagToAccept]);\n      }\n    }\n    \n    // Remove from suggested tags\n    setSuggestedTags(prev => prev.filter(tag => tag !== tagToAccept));\n  };\n\n  // Handle accepting all suggested tags\n  const handleAcceptAllSuggestedTags = () => {\n    if (suggestedTags.length === 0) return;\n    \n    if (editingBookmark) {\n      // For existing bookmarks, use the API\n      const passcode = isProtected ? (form.getValues(\"passcode\") || undefined) : undefined;\n      acceptSuggestedTagsMutation.mutate({ \n        bookmarkId: editingBookmark.id, \n        tags: suggestedTags, \n        passcode \n      });\n    } else {\n      // For new bookmarks, add to local state\n      const newTags = suggestedTags.filter(tag => !tags.includes(tag));\n      setTags(prev => [...prev, ...newTags]);\n    }\n    \n    // Clear all suggested tags\n    setSuggestedTags([]);\n  };\n\n  const onSubmit = (data: FormData) => {\n    // Comprehensive pre-submit validation guards for all scenarios\n    \n    if (!editingBookmark) {\n      // SCENARIO: Creating new bookmark\n      if (isProtected && (!data.passcode || data.passcode.trim().length < 4)) {\n        form.setError(\"passcode\", {\n          type: \"manual\",\n          message: \"Passcode is required when protection is enabled and must be at least 4 characters long\"\n        });\n        return;\n      }\n    } else {\n      // SCENARIO: Editing existing bookmark\n      const wasProtected = editingBookmark.hasPasscode || false;\n      \n      if (isProtected && !wasProtected) {\n        // CRITICAL FIX: Transitioning from unprotected â†’ protected REQUIRES passcode\n        if (!data.passcode || data.passcode.trim().length < 4) {\n          form.setError(\"passcode\", {\n            type: \"manual\",\n            message: \"A passcode is required when enabling protection on this bookmark\"\n          });\n          return;\n        }\n      } else if (isProtected && wasProtected) {\n        // Transitioning from protected â†’ protected: allow empty (keeps existing) or new passcode\n        if (data.passcode && data.passcode.trim().length > 0 && data.passcode.trim().length < 4) {\n          form.setError(\"passcode\", {\n            type: \"manual\",\n            message: \"Passcode must be at least 4 characters long\"\n          });\n          return;\n        }\n      }\n      // protected â†’ unprotected: no validation needed (will be set to null)\n    }\n\n    const bookmarkData: InsertBookmark = {\n      name: data.name,\n      description: data.description || null,\n      url: data.url,\n      categoryId: data.categoryId || null,\n      isFavorite: data.isFavorite || false,\n      tags: tags,\n    };\n\n    // Handle passcode logic based on scenario\n    if (isProtected) {\n      if (editingBookmark) {\n        const wasProtected = editingBookmark.hasPasscode || false;\n        \n        if (!wasProtected) {\n          // unprotected â†’ protected: use the required new passcode\n          bookmarkData.passcode = data.passcode?.trim() || null;\n        } else {\n          // protected â†’ protected: use new passcode if provided, otherwise omit to keep existing\n          if (data.passcode && data.passcode.trim()) {\n            bookmarkData.passcode = data.passcode.trim();\n          }\n          // If no passcode provided, omit field to keep existing passcode\n        }\n      } else {\n        // Create scenario: include the passcode\n        bookmarkData.passcode = data.passcode?.trim() || null;\n      }\n    } else {\n      // Protection disabled: explicitly set to null to remove any existing protection\n      bookmarkData.passcode = null;\n    }\n\n    createMutation.mutate(bookmarkData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md sm:max-w-lg md:max-w-2xl lg:max-w-4xl xl:max-w-5xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-add-bookmark\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"modal-title\">\n            {editingBookmark ? \"Edit Bookmark\" : \"Add New Bookmark\"}\n          </DialogTitle>\n          <DialogDescription>\n            {editingBookmark \n              ? \"Update bookmark details. Protected bookmarks can be edited without re-entering the passcode.\"\n              : \"Create a new bookmark with optional password protection.\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"url\" className=\"text-sm font-medium\">URL *</Label>\n            <Input\n              id=\"url\"\n              type=\"url\"\n              placeholder=\"https://example.com\"\n              {...form.register(\"url\")}\n              data-testid=\"input-url\"\n            />\n            {form.formState.errors.url && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-url\">\n                {form.formState.errors.url.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\" className=\"text-sm font-medium\">Name *</Label>\n            <Input\n              id=\"name\"\n              placeholder=\"Bookmark title\"\n              {...form.register(\"name\")}\n              data-testid=\"input-name\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-name\">\n                {form.formState.errors.name.message}\n              </p>\n            )}\n          </div>\n\n          <MarkdownEditor\n            id=\"description\"\n            value={form.watch(\"description\") || \"\"}\n            onChange={(value) => form.setValue(\"description\", value)}\n            placeholder=\"Optional description with markdown support...\"\n            error={form.formState.errors.description?.message}\n            data-testid=\"input-description\"\n          />\n\n          <div className=\"space-y-2\">\n            <Label className=\"text-sm font-medium\">Folder</Label>\n            <Select\n              value={form.watch(\"categoryId\")?.toString() || \"none\"}\n              onValueChange={(value) => {\n                form.setValue(\"categoryId\", value === \"none\" ? undefined : parseInt(value));\n              }}\n            >\n              <SelectTrigger data-testid=\"select-folder\">\n                <SelectValue placeholder=\"No folder\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"none\">No folder</SelectItem>\n                {categories.map((category) => (\n                  <SelectItem key={category.id} value={category.id.toString()}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-sm font-medium\">Tags</Label>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleGenerateSuggestions}\n                disabled={isGeneratingSuggestions || generateAutoTagsMutation.isPending}\n                data-testid=\"button-suggest-tags\"\n                className=\"flex items-center space-x-1\"\n              >\n                <Sparkles size={14} className={isGeneratingSuggestions ? \"animate-spin\" : \"\"} />\n                <span>\n                  {isGeneratingSuggestions \n                    ? \"Generating...\" \n                    : autoTagsGenerated \n                      ? \"Regenerate Tags\" \n                      : \"Suggest Tags\"}\n                </span>\n              </Button>\n            </div>\n            <Input\n              placeholder=\"Add tags (press Enter to add)\"\n              value={tagInput}\n              onChange={(e) => setTagInput(e.target.value)}\n              onKeyDown={handleAddTag}\n              data-testid=\"input-tags\"\n            />\n            \n            {/* Suggested Tags Section */}\n            {(suggestedTags.length > 0 || isGeneratingSuggestions) && (\n              <div className=\"border border-border rounded-md p-3 bg-muted/20\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Sparkles size={14} className=\"text-muted-foreground\" />\n                    <Label className=\"text-sm font-medium text-muted-foreground\">\n                      {isGeneratingSuggestions \n                        ? \"Generating tag suggestions...\" \n                        : `Suggested Tags (${suggestedTags.length})`}\n                    </Label>\n                  </div>\n                  {suggestedTags.length > 0 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleAcceptAllSuggestedTags}\n                      disabled={acceptSuggestedTagsMutation.isPending}\n                      data-testid=\"button-accept-all-suggested\"\n                      className=\"text-xs\"\n                    >\n                      Accept All\n                    </Button>\n                  )}\n                </div>\n                \n                {isGeneratingSuggestions ? (\n                  <div className=\"flex items-center justify-center py-4\">\n                    <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                      <Sparkles size={16} className=\"animate-spin\" />\n                      <span>Analyzing URL and content...</span>\n                    </div>\n                  </div>\n                ) : suggestedTags.length > 0 ? (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {suggestedTags.map((tag, index) => (\n                      <Badge\n                        key={index}\n                        variant=\"outline\"\n                        className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800 text-blue-700 dark:text-blue-300 flex items-center space-x-1 cursor-pointer hover:bg-blue-100 dark:hover:bg-blue-900 transition-colors\"\n                        onClick={() => handleAcceptSuggestedTag(tag)}\n                        data-testid={`suggested-tag-${tag.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        <span>{tag}</span>\n                        <Plus size={12} className=\"text-blue-500\" />\n                      </Badge>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-4 text-sm text-muted-foreground\">\n                    No tag suggestions found for this URL\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {/* Current Tags */}\n            {tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-1 mt-2\">\n                {tags.map((tag, index) => (\n                  <Badge\n                    key={index}\n                    className=\"bg-primary text-primary-foreground flex items-center space-x-1\"\n                    data-testid={`tag-${tag.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <span>{tag}</span>\n                    <button\n                      type=\"button\"\n                      onClick={() => handleRemoveTag(tag)}\n                      className=\"text-primary-foreground/80 hover:text-primary-foreground\"\n                      data-testid={`button-remove-tag-${tag.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <X size={12} />\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <Checkbox\n              id=\"favorite\"\n              checked={form.watch(\"isFavorite\") || false}\n              onCheckedChange={(checked) => form.setValue(\"isFavorite\", !!checked)}\n              data-testid=\"checkbox-favorite\"\n            />\n            <Label htmlFor=\"favorite\" className=\"text-sm font-medium cursor-pointer\">\n              Mark as favorite\n            </Label>\n          </div>\n\n          <div className=\"space-y-3 border-t border-border pt-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Lock size={16} className=\"text-muted-foreground\" />\n                <div>\n                  <Label htmlFor=\"protection-toggle\" className=\"text-sm font-medium cursor-pointer\">\n                    Protect with passcode\n                  </Label>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Require a passcode to view this bookmark\n                  </p>\n                </div>\n              </div>\n              <Switch\n                id=\"protection-toggle\"\n                checked={isProtected}\n                onCheckedChange={(checked) => {\n                  setIsProtected(checked);\n                  if (!checked) {\n                    form.setValue(\"passcode\", \"\");\n                  }\n                  // Clear all form errors when toggling protection\n                  form.clearErrors();\n                }}\n                data-testid=\"switch-protection\"\n              />\n            </div>\n\n            {isProtected && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"passcode\" className=\"text-sm font-medium\">\n                  Passcode {!editingBookmark && \"*\"}\n                </Label>\n                <Input\n                  id=\"passcode\"\n                  type=\"password\"\n                  placeholder={editingBookmark ? \"Enter new passcode or leave empty to keep current\" : \"Enter a secure passcode (required)\"}\n                  {...form.register(\"passcode\")}\n                  data-testid=\"input-passcode\"\n                />\n                {form.formState.errors.passcode && (\n                  <p className=\"text-sm text-destructive\" data-testid=\"error-passcode\">\n                    {form.formState.errors.passcode.message}\n                  </p>\n                )}\n                <p className=\"text-xs text-muted-foreground\">\n                  {editingBookmark \n                    ? \"Must be 4-64 characters long. Leave empty to keep current passcode.\" \n                    : \"Must be 4-64 characters long. Required for protection.\"}\n                </p>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createMutation.isPending}\n              data-testid=\"button-save\"\n            >\n              {createMutation.isPending \n                ? \"Saving...\" \n                : editingBookmark ? \"Update Bookmark\" : \"Save Bookmark\"\n              }\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "size_bytes": 26135
    },
    "client/src/components/bookmark-card.tsx": {
      "content": "import { useState, useRef, useEffect } from \"react\";\nimport { Star, Globe, Edit, Trash2, ExternalLink, Lock, Eye, Share2, Copy, Camera, RefreshCw, AlertCircle, Image as ImageIcon, CheckCircle, XCircle, HelpCircle, Link } from \"lucide-react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Bookmark, Category } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ninterface BookmarkCardProps {\n  bookmark: Bookmark & { category?: Category; hasPasscode?: boolean };\n  onEdit?: (bookmark: Bookmark & { category?: Category; hasPasscode?: boolean }) => void;\n  onView?: (bookmark: Bookmark & { category?: Category; hasPasscode?: boolean }) => void;\n  onShare?: (bookmark: Bookmark & { category?: Category; hasPasscode?: boolean }) => void;\n  onCopyShareLink?: (bookmark: Bookmark & { category?: Category; hasPasscode?: boolean }) => void;\n  isProtected?: boolean;\n  onUnlock?: () => void;\n  onLock?: () => void;\n  // Bulk selection props\n  bulkMode?: boolean;\n  isSelected?: boolean;\n  onSelect?: (bookmarkId: number, isSelected: boolean) => void;\n  // Passcode for protected bookmark operations\n  passcode?: string;\n  // Loading states\n  isShareLoading?: boolean;\n}\n\nexport function BookmarkCard({ \n  bookmark, \n  onEdit, \n  onView, \n  onShare, \n  onCopyShareLink,\n  isProtected = false, \n  onUnlock, \n  onLock,\n  bulkMode = false,\n  isSelected = false,\n  onSelect,\n  passcode,\n  isShareLoading = false\n}: BookmarkCardProps) {\n  const [isHovered, setIsHovered] = useState(false);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [imageError, setImageError] = useState(false);\n  const [thumbnailRetryCount, setThumbnailRetryCount] = useState(0);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const imageRef = useRef<HTMLImageElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Intersection observer for lazy loading\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsIntersecting(true);\n          observer.disconnect();\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (cardRef.current) {\n      observer.observe(cardRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, []);\n\n  // Fetch screenshot status for this bookmark (for real-time updates)\n  const { data: screenshotData, refetch: refetchScreenshot } = useQuery<{\n    status: string;\n    screenshotUrl?: string;\n    updatedAt?: string;\n  }>({\n    queryKey: [`/api/bookmarks/${bookmark.id}/screenshot/status`],\n    enabled: !isProtected && (\n      bookmark.screenshotStatus === 'pending' || \n      thumbnailRetryCount > 0\n    ),\n    refetchInterval: (query) => (query.state.data?.status === 'pending') ? 3000 : false,\n    staleTime: 30000,\n  });\n\n  // Use real-time data if available, otherwise use bookmark data\n  const currentScreenshotUrl = screenshotData?.screenshotUrl || bookmark.screenshotUrl;\n  const currentScreenshotStatus = screenshotData?.status || bookmark.screenshotStatus || 'idle';\n\n  const toggleFavoriteMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"PATCH\", `/api/bookmarks/${bookmark.id}`, {\n        isFavorite: !bookmark.isFavorite\n      });\n    },\n    onSuccess: () => {\n      // Invalidate all bookmark queries regardless of parameters\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/bookmarks\"],\n        exact: false \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        description: bookmark.isFavorite \n          ? \"Removed from favorites\" \n          : \"Added to favorites\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        description: \"Failed to update favorite status\",\n      });\n    }\n  });\n\n  const deleteBookmarkMutation = useMutation({\n    mutationFn: async () => {\n      // Include passcode in request body for protected bookmarks\n      const body = bookmark.hasPasscode && passcode ? { passcode } : undefined;\n      return await apiRequest(\"DELETE\", `/api/bookmarks/${bookmark.id}`, body);\n    },\n    onSuccess: () => {\n      // Invalidate all bookmark queries regardless of parameters\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/bookmarks\"],\n        exact: false \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        description: \"Bookmark deleted\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        description: \"Failed to delete bookmark\",\n      });\n    }\n  });\n\n  // Screenshot generation mutation\n  const generateScreenshotMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", `/api/bookmarks/${bookmark.id}/screenshot`);\n    },\n    onSuccess: () => {\n      // Invalidate all bookmark queries regardless of parameters\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/bookmarks\"],\n        exact: false \n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/bookmarks/${bookmark.id}/screenshot/status`] });\n      setThumbnailRetryCount(prev => prev + 1);\n      setTimeout(() => {\n        refetchScreenshot();\n      }, 2000);\n    },\n    onError: (error: any) => {\n      console.error(\"Screenshot generation failed:\", error);\n      toast({\n        variant: \"destructive\",\n        description: \"Failed to generate screenshot\",\n      });\n    }\n  });\n\n  // Link checking mutation\n  const checkLinkMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", `/api/bookmarks/${bookmark.id}/check-link`);\n    },\n    onSuccess: () => {\n      // Invalidate all bookmark queries regardless of parameters\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/bookmarks\"],\n        exact: false \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        description: \"Link status updated\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Link check failed:\", error);\n      toast({\n        variant: \"destructive\",\n        description: \"Failed to check link status\",\n      });\n    }\n  });\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this bookmark?\")) {\n      deleteBookmarkMutation.mutate();\n    }\n  };\n\n  const handleVisit = () => {\n    if (isProtected) {\n      // Protected and locked - show unlock\n      onUnlock?.();\n    } else {\n      // Unlocked (regardless of hasPasscode) - visit the URL\n      window.open(bookmark.url, '_blank', 'noopener,noreferrer');\n    }\n  };\n\n  const handleGenerateScreenshot = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!isProtected && currentScreenshotStatus !== 'pending') {\n      generateScreenshotMutation.mutate();\n    }\n  };\n\n  const handleCheckLink = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!isProtected && !checkLinkMutation.isPending) {\n      checkLinkMutation.mutate();\n    }\n  };\n\n  const handleImageLoad = () => {\n    setImageLoaded(true);\n    setImageError(false);\n  };\n\n  const handleImageError = () => {\n    setImageError(true);\n    setImageLoaded(false);\n  };\n\n  const getDomain = (url: string) => {\n    try {\n      return new URL(url).hostname;\n    } catch {\n      return url;\n    }\n  };\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(bookmark.url);\n      toast({\n        description: \"URL copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        description: \"Failed to copy URL\",\n      });\n    }\n  };\n\n  const timeAgo = isProtected ? \"â€”\" : formatDistanceToNow(new Date(bookmark.createdAt), { addSuffix: true });\n\n  // Helper function to get link status info\n  const getLinkStatusInfo = () => {\n    if (isProtected) {\n      return {\n        status: 'unknown',\n        icon: HelpCircle,\n        color: 'text-muted-foreground',\n        bgColor: 'bg-muted/20',\n        borderColor: 'border-muted-foreground/20',\n        label: 'Unknown',\n        tooltip: 'Status hidden for protected bookmark'\n      };\n    }\n\n    const status = bookmark.linkStatus || 'unknown';\n    const lastChecked = bookmark.lastLinkCheckAt;\n    const lastCheckedText = lastChecked \n      ? `Last checked ${formatDistanceToNow(new Date(lastChecked), { addSuffix: true })}`\n      : 'Never checked';\n\n    switch (status) {\n      case 'ok':\n        return {\n          status: 'ok',\n          icon: CheckCircle,\n          color: 'text-green-700 dark:text-green-400',\n          bgColor: 'bg-green-50 dark:bg-green-950',\n          borderColor: 'border-green-200 dark:border-green-800',\n          label: 'Working',\n          tooltip: `Link is working â€¢ ${lastCheckedText}${bookmark.httpStatus ? ` â€¢ HTTP ${bookmark.httpStatus}` : ''}`\n        };\n      case 'broken':\n        return {\n          status: 'broken',\n          icon: XCircle,\n          color: 'text-red-700 dark:text-red-400',\n          bgColor: 'bg-red-50 dark:bg-red-950',\n          borderColor: 'border-red-200 dark:border-red-800',\n          label: 'Broken',\n          tooltip: `Link is broken â€¢ ${lastCheckedText}${bookmark.httpStatus ? ` â€¢ HTTP ${bookmark.httpStatus}` : ''}`\n        };\n      case 'timeout':\n        return {\n          status: 'timeout',\n          icon: AlertCircle,\n          color: 'text-orange-700 dark:text-orange-400',\n          bgColor: 'bg-orange-50 dark:bg-orange-950',\n          borderColor: 'border-orange-200 dark:border-orange-800',\n          label: 'Timeout',\n          tooltip: `Link timed out â€¢ ${lastCheckedText}`\n        };\n      case 'unknown':\n      default:\n        return {\n          status: 'unknown',\n          icon: HelpCircle,\n          color: 'text-muted-foreground',\n          bgColor: 'bg-muted/20',\n          borderColor: 'border-muted-foreground/20',\n          label: 'Unchecked',\n          tooltip: lastCheckedText\n        };\n    }\n  };\n\n  const linkStatusInfo = getLinkStatusInfo();\n  const StatusIcon = linkStatusInfo.icon;\n\n  // Link Status Badge Component\n  const LinkStatusBadge = () => {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Badge\n              variant=\"outline\"\n              className={`text-xs ${linkStatusInfo.color} ${linkStatusInfo.bgColor} ${linkStatusInfo.borderColor}`}\n              data-testid={`link-status-badge-${bookmark.id}`}\n            >\n              <StatusIcon size={10} className=\"mr-1\" />\n              {linkStatusInfo.label}\n            </Badge>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p className=\"text-sm\">{linkStatusInfo.tooltip}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  };\n\n  // Thumbnail component for different states\n  const ThumbnailDisplay = () => {\n    if (isProtected) {\n      return (\n        <div className=\"w-full h-32 bg-muted/40 rounded-md flex items-center justify-center\" data-testid={`thumbnail-protected-${bookmark.id}`}>\n          <Lock size={24} className=\"text-muted-foreground\" />\n        </div>\n      );\n    }\n\n    // Show thumbnail if available and loaded\n    if (currentScreenshotUrl && !imageError && isIntersecting) {\n      return (\n        <div className=\"relative w-full h-32 bg-muted/20 rounded-md overflow-hidden\" data-testid={`thumbnail-container-${bookmark.id}`}>\n          {!imageLoaded && (\n            <Skeleton className=\"absolute inset-0 w-full h-full\" />\n          )}\n          <img\n            ref={imageRef}\n            src={currentScreenshotUrl}\n            alt={`Screenshot of ${bookmark.name}`}\n            className={`w-full h-full object-cover transition-opacity duration-300 ${\n              imageLoaded ? 'opacity-100' : 'opacity-0'\n            }`}\n            onLoad={handleImageLoad}\n            onError={handleImageError}\n            loading=\"lazy\"\n            data-testid={`thumbnail-image-${bookmark.id}`}\n          />\n          {currentScreenshotStatus === 'pending' && (\n            <div className=\"absolute inset-0 bg-black/20 flex items-center justify-center\">\n              <RefreshCw size={16} className=\"text-white animate-spin\" />\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    // Show different states\n    const renderPlaceholder = () => {\n      switch (currentScreenshotStatus) {\n        case 'pending':\n          return (\n            <div className=\"w-full h-32 bg-muted/20 rounded-md flex flex-col items-center justify-center space-y-2\" data-testid={`thumbnail-pending-${bookmark.id}`}>\n              <RefreshCw size={20} className=\"text-muted-foreground animate-spin\" />\n              <span className=\"text-xs text-muted-foreground\">Generating...</span>\n            </div>\n          );\n        case 'failed':\n          return (\n            <div \n              className=\"w-full h-32 bg-muted/20 rounded-md flex flex-col items-center justify-center space-y-2 group/thumb cursor-pointer hover:bg-muted/30 transition-colors\" \n              onClick={handleGenerateScreenshot}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  e.preventDefault();\n                  handleGenerateScreenshot(e as any);\n                }\n              }}\n              role=\"button\"\n              tabIndex={0}\n              aria-label=\"Retry screenshot generation\"\n              data-testid={`thumbnail-failed-${bookmark.id}`}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <AlertCircle size={16} className=\"text-muted-foreground\" />\n                <RefreshCw size={14} className=\"text-muted-foreground group-hover/thumb:rotate-180 transition-transform\" />\n              </div>\n              <span className=\"text-xs text-muted-foreground text-center\">Failed to generate<br/>Click to retry</span>\n            </div>\n          );\n        case 'idle':\n        default:\n          return (\n            <div \n              className=\"w-full h-32 bg-muted/20 rounded-md flex flex-col items-center justify-center space-y-2 group/thumb cursor-pointer hover:bg-muted/30 transition-colors\" \n              onClick={handleGenerateScreenshot}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  e.preventDefault();\n                  handleGenerateScreenshot(e as any);\n                }\n              }}\n              role=\"button\"\n              tabIndex={0}\n              aria-label=\"Generate screenshot preview\"\n              data-testid={`thumbnail-idle-${bookmark.id}`}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <ImageIcon size={20} className=\"text-muted-foreground\" />\n                <Camera size={16} className=\"text-muted-foreground group-hover/thumb:scale-110 transition-transform\" />\n              </div>\n              <span className=\"text-xs text-muted-foreground text-center\">No preview<br/>Click to generate</span>\n            </div>\n          );\n      }\n    };\n\n    return renderPlaceholder();\n  };\n\n  return (\n    <Card \n      ref={cardRef}\n      className={`group hover:shadow-md transition-shadow ${\n        isProtected ? 'border-muted-foreground/20 bg-muted/20' : ''\n      } ${isSelected ? 'ring-2 ring-primary bg-primary/5' : ''} ${\n        bulkMode ? 'cursor-pointer' : ''\n      }`}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onClick={bulkMode ? () => onSelect?.(bookmark.id, !isSelected) : undefined}\n      data-testid={`bookmark-card-${bookmark.id}`}\n    >\n      <CardContent className=\"p-4\">\n        {/* Thumbnail Section */}\n        <div className=\"mb-4\">\n          <ThumbnailDisplay />\n        </div>\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-start gap-3 flex-1\">\n            {bulkMode && (\n              <div className=\"pt-1\" onClick={(e) => e.stopPropagation()}>\n                <Checkbox\n                  checked={isSelected}\n                  onCheckedChange={(checked) => onSelect?.(bookmark.id, checked as boolean)}\n                  data-testid={`checkbox-select-${bookmark.id}`}\n                />\n              </div>\n            )}\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                {isProtected && (\n                  <Lock size={14} className=\"text-muted-foreground flex-shrink-0\" data-testid={`lock-icon-${bookmark.id}`} />\n                )}\n                <h3 className=\"font-medium text-foreground line-clamp-2\" data-testid={`bookmark-title-${bookmark.id}`}>\n                  {isProtected ? \"â€¢â€¢â€¢ Protected Bookmark â€¢â€¢â€¢\" : bookmark.name}\n                </h3>\n              </div>\n              {isProtected ? (\n                <p className=\"text-sm text-muted-foreground italic line-clamp-2\" data-testid={`bookmark-protected-text-${bookmark.id}`}>\n                  Protected content - click to unlock\n                </p>\n              ) : (\n                bookmark.description && (\n                  <div className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`bookmark-description-${bookmark.id}`}>\n                    <ReactMarkdown\n                      remarkPlugins={[remarkGfm]}\n                      components={{\n                        p: ({ children }) => <span className=\"inline\">{children}</span>,\n                        h1: ({ children }) => <span className=\"font-semibold\">{children}</span>,\n                        h2: ({ children }) => <span className=\"font-semibold\">{children}</span>,\n                        h3: ({ children }) => <span className=\"font-semibold\">{children}</span>,\n                        h4: ({ children }) => <span className=\"font-semibold\">{children}</span>,\n                        h5: ({ children }) => <span className=\"font-semibold\">{children}</span>,\n                        h6: ({ children }) => <span className=\"font-semibold\">{children}</span>,\n                        strong: ({ children }) => <span className=\"font-bold\">{children}</span>,\n                        em: ({ children }) => <span className=\"italic\">{children}</span>,\n                        code: ({ children }) => <span className=\"bg-muted px-1 py-0.5 rounded text-xs font-mono\">{children}</span>,\n                        a: ({ children, href }) => <span className=\"text-primary underline\">{children}</span>,\n                        ul: ({ children }) => <span className=\"inline\">{children}</span>,\n                        ol: ({ children }) => <span className=\"inline\">{children}</span>,\n                        li: ({ children }) => <span className=\"inline\">{children} â€¢ </span>,\n                        pre: () => null, // Hide code blocks in card preview\n                        blockquote: ({ children }) => <span className=\"italic border-l-2 border-primary/30 pl-2\">{children}</span>\n                      }}\n                    >\n                      {bookmark.description}\n                    </ReactMarkdown>\n                  </div>\n                )\n              )}\n            </div>\n          </div>\n          \n          <div className={`flex items-center space-x-1 transition-opacity ${\n            isHovered ? \"opacity-100\" : \"opacity-0\"\n          }`}>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"h-8 w-8 p-0 text-muted-foreground hover:text-accent\"\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleFavoriteMutation.mutate();\n              }}\n              disabled={toggleFavoriteMutation.isPending || isProtected}\n              data-testid={`button-favorite-${bookmark.id}`}\n            >\n              <Star\n                size={16}\n                className={isProtected ? \"\" : (bookmark.isFavorite ? \"fill-current text-accent\" : \"\")}\n              />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"h-8 w-8 p-0 text-muted-foreground hover:text-green-500\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleCopy();\n              }}\n              data-testid={`button-copy-${bookmark.id}`}\n              title=\"Copy URL to clipboard\"\n            >\n              <Copy size={16} />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className={`h-8 w-8 p-0 text-muted-foreground hover:text-blue-500 ${\n                generateScreenshotMutation.isPending ? 'animate-pulse' : ''\n              }`}\n              onClick={handleGenerateScreenshot}\n              disabled={generateScreenshotMutation.isPending || isProtected || currentScreenshotStatus === 'pending'}\n              title={currentScreenshotStatus === 'pending' ? 'Generating screenshot...' : 'Generate screenshot'}\n              data-testid={`button-screenshot-${bookmark.id}`}\n            >\n              {generateScreenshotMutation.isPending || currentScreenshotStatus === 'pending' ? (\n                <RefreshCw size={16} className=\"animate-spin\" />\n              ) : (\n                <Camera size={16} />\n              )}\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className={`h-8 w-8 p-0 text-muted-foreground hover:text-green-500 ${\n                checkLinkMutation.isPending ? 'animate-pulse' : ''\n              }`}\n              onClick={handleCheckLink}\n              disabled={checkLinkMutation.isPending || isProtected}\n              title={checkLinkMutation.isPending ? 'Checking link...' : 'Check link now'}\n              data-testid={`button-check-link-${bookmark.id}`}\n            >\n              {checkLinkMutation.isPending ? (\n                <RefreshCw size={16} className=\"animate-spin\" />\n              ) : (\n                <Link size={16} />\n              )}\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"h-8 w-8 p-0 text-muted-foreground hover:text-foreground\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onView?.(bookmark);\n              }}\n              disabled={isProtected}\n              data-testid={`button-view-${bookmark.id}`}\n            >\n              <Eye size={16} />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"h-8 w-8 p-0 text-muted-foreground hover:text-foreground\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onEdit?.(bookmark);\n              }}\n              disabled={isProtected}\n              data-testid={`button-edit-${bookmark.id}`}\n            >\n              <Edit size={16} />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className={`h-8 w-8 p-0 text-muted-foreground hover:text-blue-500 ${\n                bookmark.isShared ? 'text-blue-500' : ''\n              }`}\n              onClick={(e) => {\n                e.stopPropagation();\n                onShare?.(bookmark);\n              }}\n              disabled={isProtected || bookmark.hasPasscode || isShareLoading}\n              title={bookmark.hasPasscode ? \"Protected bookmarks cannot be shared\" : (bookmark.isShared ? \"Stop sharing\" : \"Share bookmark\")}\n              data-testid={`button-share-${bookmark.id}`}\n            >\n              {isShareLoading ? (\n                <RefreshCw size={16} className=\"animate-spin\" />\n              ) : (\n                <Share2 size={16} className={bookmark.isShared ? 'fill-current' : ''} />\n              )}\n            </Button>\n            {bookmark.isShared && bookmark.shareId && !isProtected && !bookmark.hasPasscode && (\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                className=\"h-8 w-8 p-0 text-muted-foreground hover:text-emerald-500\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onCopyShareLink?.(bookmark);\n                }}\n                title=\"Copy share link\"\n                data-testid={`button-copy-share-link-${bookmark.id}`}\n              >\n                <Link size={16} />\n              </Button>\n            )}\n            {bookmark.hasPasscode && !isProtected && (\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                className=\"h-8 w-8 p-0 text-muted-foreground hover:text-amber-500\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onLock?.();\n                }}\n                data-testid={`button-lock-${bookmark.id}`}\n              >\n                <Lock size={16} />\n              </Button>\n            )}\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"h-8 w-8 p-0 text-muted-foreground hover:text-destructive\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleDelete();\n              }}\n              disabled={deleteBookmarkMutation.isPending || isProtected}\n              data-testid={`button-delete-${bookmark.id}`}\n            >\n              <Trash2 size={16} />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2 text-xs text-muted-foreground mb-3\">\n          <Globe size={12} />\n          <span className=\"truncate\" data-testid={`bookmark-domain-${bookmark.id}`}>\n            {isProtected ? \"â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢\" : getDomain(bookmark.url)}\n          </span>\n          <span>â€¢</span>\n          <span data-testid={`bookmark-date-${bookmark.id}`}>{timeAgo}</span>\n        </div>\n\n        {!isProtected && (bookmark.tags?.length > 0 || bookmark.isShared || bookmark.linkStatus) && (\n          <div className=\"flex flex-wrap gap-1 mb-3\">\n            <LinkStatusBadge />\n            {bookmark.tags && bookmark.tags.map((tag, index) => (\n              <Badge\n                key={index}\n                variant=\"secondary\"\n                className=\"text-xs hover:bg-secondary/80 cursor-pointer\"\n                data-testid={`tag-${tag.toLowerCase().replace(/\\s+/g, '-')}-${bookmark.id}`}\n              >\n                {tag}\n              </Badge>\n            ))}\n            {bookmark.isShared && (\n              <Badge\n                variant=\"outline\"\n                className=\"text-xs text-blue-600 border-blue-200 bg-blue-50 dark:text-blue-400 dark:border-blue-800 dark:bg-blue-950\"\n                data-testid={`shared-badge-${bookmark.id}`}\n              >\n                <Share2 size={10} className=\"mr-1\" />\n                Shared\n              </Badge>\n            )}\n          </div>\n        )}\n        \n        {isProtected && (\n          <div className=\"flex flex-wrap gap-1 mb-3\">\n            <LinkStatusBadge />\n            <Badge\n              variant=\"outline\"\n              className=\"text-xs text-muted-foreground border-muted-foreground/30\"\n              data-testid={`protected-badge-${bookmark.id}`}\n            >\n              <Lock size={10} className=\"mr-1\" />\n              Protected\n            </Badge>\n          </div>\n        )}\n        \n        {!isProtected && !bookmark.tags?.length && (bookmark.isShared || bookmark.linkStatus) && (\n          <div className=\"flex flex-wrap gap-1 mb-3\">\n            <LinkStatusBadge />\n            {bookmark.isShared && (\n              <Badge\n                variant=\"outline\"\n                className=\"text-xs text-blue-600 border-blue-200 bg-blue-50 dark:text-blue-400 dark:border-blue-800 dark:bg-blue-950\"\n                data-testid={`shared-badge-${bookmark.id}`}\n              >\n                <Share2 size={10} className=\"mr-1\" />\n                Shared\n              </Badge>\n            )}\n          </div>\n        )}\n\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"p-0 h-auto text-primary hover:text-primary/80 font-medium\"\n          onClick={(e) => {\n            e.stopPropagation();\n            handleVisit();\n          }}\n          data-testid={isProtected ? `button-unlock-${bookmark.id}` : `button-visit-${bookmark.id}`}\n        >\n          {isProtected ? (\n            // Protected and locked - show unlock\n            <>\n              <span>Unlock</span>\n              <Lock size={12} className=\"ml-1\" />\n            </>\n          ) : (\n            // Unlocked (or never protected) - show visit\n            <>\n              <span>Visit</span>\n              <ExternalLink size={12} className=\"ml-1\" />\n            </>\n          )}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "size_bytes": 29291
    },
    "client/src/components/sidebar.tsx": {
      "content": "import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Folder, Home, Star, Plus, BookmarkIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport type { Category } from \"@shared/schema\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCreateFolder: () => void;\n  stats: {\n    total: number;\n    favorites: number;\n    categories: number;\n    tags: string[];\n  };\n}\n\nexport function Sidebar({\n  isOpen,\n  onClose,\n  onCreateFolder,\n  stats,\n}: SidebarProps) {\n  const [location] = useLocation();\n\n  const { data: categories = [] } = useQuery<\n    (Category & { bookmarkCount: number })[]\n  >({\n    queryKey: [\"/api/categories?withCounts=true\"],\n  });\n\n  const isActive = (path: string) => location === path;\n\n  const navItems = [\n    {\n      path: \"/\",\n      icon: Home,\n      label: \"All Bookmarks\",\n      count: stats.total,\n      active: isActive(\"/\"),\n    },\n    {\n      path: \"/favorites\",\n      icon: Star,\n      label: \"Favorites\",\n      count: stats.favorites,\n      active: isActive(\"/favorites\"),\n    },\n  ];\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n\n      {/* Sidebar */}\n      <aside\n        className={`\n        w-64 bg-card border-r border-border flex flex-col transition-transform duration-300 \n        -translate-x-full ${isOpen ? \"translate-x-0\" : \"\"} \n        lg:translate-x-0 fixed lg:relative z-30 h-full\n      `}\n      >\n        {/* Sidebar Header */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <BookmarkIcon className=\"text-primary-foreground\" size={16} />\n            </div>\n            <h1 className=\"text-xl font-bold text-foreground\">Memorize</h1>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 p-4 space-y-2\">\n          {navItems.map((item) => (\n            <Link key={item.path} href={item.path}>\n              <Button\n                variant={item.active ? \"default\" : \"ghost\"}\n                className={`w-full justify-start space-x-3 ${\n                  item.active\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                }`}\n                onClick={onClose}\n                data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, \"-\")}`}\n              >\n                <item.icon size={20} />\n                <span className=\"flex-1 text-left\">{item.label}</span>\n                {item.count !== undefined && (\n                  <span\n                    className={`text-xs min-w-[20px] h-5 px-1 rounded-full flex items-center justify-center ${\n                      item.active\n                        ? \"bg-primary-foreground text-primary\"\n                        : \"bg-secondary text-secondary-foreground\"\n                    }`}\n                  >\n                    {item.count}\n                  </span>\n                )}\n              </Button>\n            </Link>\n          ))}\n\n          <Separator className=\"my-4\" />\n\n          {/* Folders Section */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between px-3 py-2\">\n              <h3 className=\"text-sm font-medium text-muted-foreground uppercase tracking-wide\">\n                Folders\n              </h3>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"h-6 w-6 p-0 text-muted-foreground hover:text-foreground\"\n                onClick={onCreateFolder}\n                data-testid=\"button-create-folder\"\n              >\n                <Plus size={12} />\n              </Button>\n            </div>\n\n            <div className=\"space-y-1\">\n              {categories.map((category) => (\n                <Link key={category.id} href={`/category/${category.id}`}>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start space-x-3 text-muted-foreground hover:bg-muted hover:text-foreground\"\n                    onClick={onClose}\n                    data-testid={`folder-${category.name.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                  >\n                    <Folder size={16} />\n                    <span className=\"flex-1 text-left\">{category.name}</span>\n                    <span className=\"text-xs\">{category.bookmarkCount}</span>\n                  </Button>\n                </Link>\n              ))}\n\n              {categories.length === 0 && (\n                <p className=\"text-sm text-muted-foreground px-3 py-2\">\n                  No folders yet\n                </p>\n              )}\n            </div>\n          </div>\n        </nav>\n      </aside>\n    </>\n  );\n}\n",
      "size_bytes": 5115
    },
    "client/src/components/theme-provider.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ThemeContext, type Theme } from \"@/lib/theme\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n  const queryClient = useQueryClient();\n\n  // Fetch preferences from database\n  const { data: preferences } = useQuery<{ theme?: Theme; viewMode?: \"grid\" | \"list\" }>({\n    queryKey: [\"/api/preferences\"],\n    staleTime: 1000 * 60 * 5, // Cache for 5 minutes\n  });\n\n  // Update preferences mutation\n  const updatePreferencesMutation = useMutation({\n    mutationFn: async (data: { theme?: Theme; viewMode?: \"grid\" | \"list\" }) => {\n      return await apiRequest(\"PATCH\", \"/api/preferences\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/preferences\"] });\n    }\n  });\n\n  // Initialize theme from database preferences or localStorage fallback\n  useEffect(() => {\n    if (preferences?.theme) {\n      setTheme(preferences.theme);\n    } else {\n      // Fallback to localStorage for offline support\n      const savedTheme = localStorage.getItem(\"theme\") as Theme;\n      if (savedTheme) {\n        setTheme(savedTheme);\n      }\n    }\n  }, [preferences]);\n\n  // Apply theme to DOM\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    \n    // Save to localStorage as fallback\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const handleSetTheme = (newTheme: Theme) => {\n    setTheme(newTheme);\n    // Save to database when user manually changes theme\n    updatePreferencesMutation.mutate({ theme: newTheme });\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme: handleSetTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n",
      "size_bytes": 2040
    },
    "client/src/hooks/use-mobile.tsx": {
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "size_bytes": 565
    },
    "client/src/hooks/use-toast.ts": {
      "content": "import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
      "size_bytes": 3895
    },
    "client/src/lib/queryClient.ts": {
      "content": "import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n",
      "size_bytes": 1383
    },
    "client/src/lib/theme.ts": {
      "content": "import { createContext, useContext } from \"react\";\n\nexport type Theme = \"light\" | \"dark\";\n\nexport interface ThemeContextValue {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextValue | undefined>(undefined);\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n",
      "size_bytes": 453
    },
    "client/src/lib/utils.ts": {
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "size_bytes": 166
    },
    "client/src/pages/bookmarks.tsx": {
      "content": "import { useState, useMemo, useEffect } from \"react\";\nimport {\n  Menu,\n  Search,\n  Grid,\n  List,\n  Plus,\n  Moon,\n  Sun,\n  Filter,\n  X,\n  LogOut,\n  CheckSquare,\n  Square,\n  Trash2,\n  FolderOpen,\n  CheckCircle,\n  XCircle,\n  HelpCircle,\n  Link,\n  RefreshCw,\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { useTheme } from \"@/lib/theme\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { BookmarkCard } from \"@/components/bookmark-card\";\nimport { AddBookmarkModal } from \"@/components/add-bookmark-modal\";\nimport { AddCategoryModal } from \"@/components/add-category-modal\";\nimport { PasscodeModal } from \"@/components/passcode-modal\";\nimport { BookmarkDetailsModal } from \"@/components/bookmark-details-modal\";\nimport { BulkActionToolbar } from \"@/components/bulk-action-toolbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport type { Bookmark, Category } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nfunction BookmarksContent() {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isAddCategoryModalOpen, setIsAddCategoryModalOpen] = useState(false);\n  const [editingBookmark, setEditingBookmark] = useState<any>(null);\n  const [viewingBookmark, setViewingBookmark] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [selectedLinkStatus, setSelectedLinkStatus] = useState<string>(\"\");\n  const [sortBy, setSortBy] = useState<\"createdAt\" | \"name\" | \"isFavorite\">(\n    \"createdAt\",\n  );\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n\n  // Passcode modal state\n  const [isPasscodeModalOpen, setIsPasscodeModalOpen] = useState(false);\n  const [selectedProtectedBookmark, setSelectedProtectedBookmark] = useState<\n    (Bookmark & { category?: Category; hasPasscode?: boolean }) | null\n  >(null);\n\n  // Track unlocked bookmarks in session (bookmark IDs that have been unlocked)\n  const [unlockedBookmarks, setUnlockedBookmarks] = useState<Set<number>>(\n    new Set(),\n  );\n\n  // Store passcodes for unlocked protected bookmarks\n  const [unlockedPasscodes, setUnlockedPasscodes] = useState<Record<number, string>>({});\n\n  // Bulk selection state\n  const [bulkMode, setBulkMode] = useState(false);\n  const [selectedIds, setSelectedIds] = useState<number[]>([]);\n  const [bulkPasscodes, setBulkPasscodes] = useState<Record<string, string>>({});\n  const [showBulkDeleteDialog, setShowBulkDeleteDialog] = useState(false);\n  const [isBulkOperationLoading, setIsBulkOperationLoading] = useState(false);\n  const { theme, setTheme } = useTheme();\n  const { logoutMutation } = useAuth();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch preferences from database\n  const { data: preferences } = useQuery<{\n    theme?: \"light\" | \"dark\";\n    viewMode?: \"grid\" | \"list\";\n  }>({\n    queryKey: [\"/api/preferences\"],\n    staleTime: 1000 * 60 * 5, // Cache for 5 minutes\n  });\n\n  // Update preferences mutation\n  const updatePreferencesMutation = useMutation({\n    mutationFn: async (data: {\n      theme?: \"light\" | \"dark\";\n      viewMode?: \"grid\" | \"list\";\n    }) => {\n      return await apiRequest(\"PATCH\", \"/api/preferences\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/preferences\"] });\n    },\n  });\n\n  const [location] = useLocation();\n  const [match, params] = useRoute(\"/category/:id\");\n\n  // Initialize view mode from database preferences\n  useEffect(() => {\n    if (preferences?.viewMode) {\n      setViewMode(preferences.viewMode);\n    }\n  }, [preferences]);\n\n  // Extract category ID from URL and handle special routes\n  useEffect(() => {\n    if (match && params?.id) {\n      setSelectedCategory(params.id);\n    } else {\n      setSelectedCategory(\"\");\n    }\n  }, [match, params, location]);\n\n  // Handle view mode change with database persistence\n  const handleSetViewMode = (newViewMode: \"grid\" | \"list\") => {\n    setViewMode(newViewMode);\n    updatePreferencesMutation.mutate({ viewMode: newViewMode });\n  };\n\n  // Fetch stats\n  const { data: stats } = useQuery<{\n    total: number;\n    favorites: number;\n    categories: number;\n    tags: string[];\n    linkStats?: {\n      total: number;\n      working: number;\n      broken: number;\n      timeout: number;\n      unknown: number;\n    };\n  }>({\n    queryKey: [\"/api/stats\"],\n  });\n\n  // Fetch bookmarks with filters\n  const bookmarkQueryParams = new URLSearchParams();\n  if (searchQuery) bookmarkQueryParams.set(\"search\", searchQuery);\n  if (selectedCategory) bookmarkQueryParams.set(\"categoryId\", selectedCategory);\n  if (selectedTags.length > 0)\n    bookmarkQueryParams.set(\"tags\", selectedTags.join(\",\"));\n  if (selectedLinkStatus) bookmarkQueryParams.set(\"linkStatus\", selectedLinkStatus);\n  if (location === \"/favorites\") bookmarkQueryParams.set(\"isFavorite\", \"true\");\n  bookmarkQueryParams.set(\"sortBy\", sortBy);\n  bookmarkQueryParams.set(\"sortOrder\", sortOrder);\n\n  const { data: bookmarks = [], isLoading } = useQuery<\n    (Bookmark & { category?: Category; hasPasscode?: boolean })[]\n  >({\n    queryKey: [\"/api/bookmarks\", {\n      search: searchQuery || undefined,\n      categoryId: selectedCategory || undefined,\n      tags: selectedTags.length > 0 ? selectedTags.join(\",\") : undefined,\n      linkStatus: selectedLinkStatus || undefined,\n      isFavorite: location === \"/favorites\" ? \"true\" : undefined,\n      sortBy,\n      sortOrder\n    }],\n  });\n\n  const filteredBookmarks = useMemo(() => {\n    return bookmarks.filter((bookmark) => {\n      if (selectedTags.length > 0) {\n        return selectedTags.some((tag) =>\n          bookmark.tags?.some((bookmarkTag) =>\n            bookmarkTag.toLowerCase().includes(tag.toLowerCase()),\n          ),\n        );\n      }\n      return true;\n    });\n  }, [bookmarks, selectedTags]);\n\n  const handleEdit = (\n    bookmark: Bookmark & { category?: Category; hasPasscode?: boolean },\n  ) => {\n    setEditingBookmark(bookmark);\n    setIsAddModalOpen(true);\n  };\n\n  const handleView = (\n    bookmark: Bookmark & { category?: Category; hasPasscode?: boolean },\n  ) => {\n    setViewingBookmark(bookmark);\n  };\n\n  // Handle protected bookmark unlock\n  const handleUnlockBookmark = (\n    bookmark: Bookmark & { category?: Category; hasPasscode?: boolean },\n  ) => {\n    setSelectedProtectedBookmark(bookmark);\n    setIsPasscodeModalOpen(true);\n  };\n\n  // Handle protected bookmark lock\n  const handleLockBookmark = (\n    bookmark: Bookmark & { category?: Category; hasPasscode?: boolean },\n  ) => {\n    // Remove bookmark ID from unlocked set to lock it again\n    setUnlockedBookmarks((prev) => {\n      const newSet = new Set(prev);\n      newSet.delete(bookmark.id);\n      return newSet;\n    });\n    // Remove stored passcode\n    setUnlockedPasscodes((prev) => {\n      const { [bookmark.id]: removed, ...rest } = prev;\n      return rest;\n    });\n  };\n\n  // Share bookmark mutation\n  const shareBookmarkMutation = useMutation({\n    mutationFn: async ({ bookmarkId, isShared }: { bookmarkId: number; isShared: boolean }): Promise<Bookmark> => {\n      const response = await apiRequest(\"PATCH\", `/api/bookmarks/${bookmarkId}/share`, {\n        isShared\n      });\n      return response.json();\n    },\n    onMutate: async ({ bookmarkId, isShared }) => {\n      // Cancel any outgoing refetches to avoid overwriting optimistic update\n      await queryClient.cancelQueries({ queryKey: [\"/api/bookmarks\"] });\n\n      // Snapshot the previous value for rollback on error\n      const previousBookmarks = queryClient.getQueryData([\"/api/bookmarks\", {\n        search: searchQuery || undefined,\n        categoryId: selectedCategory || undefined,\n        tags: selectedTags.length > 0 ? selectedTags.join(\",\") : undefined,\n        linkStatus: selectedLinkStatus || undefined,\n        isFavorite: location === \"/favorites\" ? \"true\" : undefined,\n        sortBy,\n        sortOrder\n      }]);\n\n      // Optimistically update to the new value\n      queryClient.setQueryData([\"/api/bookmarks\", {\n        search: searchQuery || undefined,\n        categoryId: selectedCategory || undefined,\n        tags: selectedTags.length > 0 ? selectedTags.join(\",\") : undefined,\n        linkStatus: selectedLinkStatus || undefined,\n        isFavorite: location === \"/favorites\" ? \"true\" : undefined,\n        sortBy,\n        sortOrder\n      }], (old: any) => {\n        if (!old) return old;\n        return old.map((bookmark: any) => \n          bookmark.id === bookmarkId \n            ? { ...bookmark, isShared, shareId: isShared ? (bookmark.shareId || 'pending') : null }\n            : bookmark\n        );\n      });\n\n      // Return a context object with the snapshotted value\n      return { previousBookmarks };\n    },\n    onError: (error: any, { bookmarkId }, context) => {\n      // If the mutation fails, use the context returned from onMutate to roll back\n      if (context?.previousBookmarks) {\n        queryClient.setQueryData([\"/api/bookmarks\", {\n          search: searchQuery || undefined,\n          categoryId: selectedCategory || undefined,\n          tags: selectedTags.length > 0 ? selectedTags.join(\",\") : undefined,\n          linkStatus: selectedLinkStatus || undefined,\n          isFavorite: location === \"/favorites\" ? \"true\" : undefined,\n          sortBy,\n          sortOrder\n        }], context.previousBookmarks);\n      }\n\n      const errorMessage = error?.response?.data?.message || \"Failed to update bookmark sharing\";\n      toast({\n        variant: \"destructive\",\n        description: errorMessage,\n      });\n    },\n    onSuccess: (updatedBookmark: Bookmark) => {\n      // Update the cache with the actual server response\n      queryClient.setQueryData([\"/api/bookmarks\", {\n        search: searchQuery || undefined,\n        categoryId: selectedCategory || undefined,\n        tags: selectedTags.length > 0 ? selectedTags.join(\",\") : undefined,\n        linkStatus: selectedLinkStatus || undefined,\n        isFavorite: location === \"/favorites\" ? \"true\" : undefined,\n        sortBy,\n        sortOrder\n      }], (old: any) => {\n        if (!old) return old;\n        return old.map((bookmark: any) => \n          bookmark.id === updatedBookmark.id ? { ...bookmark, ...updatedBookmark } : bookmark\n        );\n      });\n\n      // Also invalidate all bookmark queries to ensure consistency across different views\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/bookmarks\"],\n        exact: false \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      \n      if (updatedBookmark.isShared && updatedBookmark.shareId) {\n        // Copy share URL to clipboard\n        const shareUrl = `${window.location.origin}/shared/${updatedBookmark.shareId}`;\n        navigator.clipboard.writeText(shareUrl).then(() => {\n          toast({\n            description: \"Share link copied to clipboard! Bookmark is now public.\",\n          });\n        }).catch(() => {\n          toast({\n            description: `Bookmark is now shared! Share URL: ${shareUrl}`,\n          });\n        });\n      } else {\n        toast({\n          description: \"Bookmark sharing disabled\",\n        });\n      }\n    }\n  });\n\n  const handleShare = (\n    bookmark: Bookmark & { category?: Category; hasPasscode?: boolean },\n  ) => {\n    // Toggle sharing status\n    const newSharingStatus = !bookmark.isShared;\n    shareBookmarkMutation.mutate({\n      bookmarkId: bookmark.id,\n      isShared: newSharingStatus\n    });\n  };\n\n  // Copy share link for already shared bookmarks\n  const handleCopyShareLink = async (\n    bookmark: Bookmark & { category?: Category; hasPasscode?: boolean },\n  ) => {\n    if (!bookmark.isShared || !bookmark.shareId) {\n      toast({\n        variant: \"destructive\",\n        description: \"This bookmark is not shared or has no share ID\",\n      });\n      return;\n    }\n\n    const shareUrl = `${window.location.origin}/shared/${bookmark.shareId}`;\n    \n    try {\n      await navigator.clipboard.writeText(shareUrl);\n      toast({\n        description: \"Share link copied to clipboard!\",\n      });\n    } catch (error) {\n      // Fallback for browsers that don't support clipboard API\n      toast({\n        description: `Share URL: ${shareUrl}`,\n      });\n    }\n  };\n\n  // Bulk link checking mutation\n  const bulkCheckLinksMutation = useMutation({\n    mutationFn: async ({ ids, passcodes }: { ids?: number[]; passcodes?: Record<string, string> }) => {\n      return await apiRequest(\"POST\", \"/api/bookmarks/bulk/check-links\", {\n        ids: ids || [],\n        passcodes\n      });\n    },\n    onSuccess: (result: { checked: number; results: any[] }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookmarks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        description: `Checked ${result.checked} bookmark(s)`,\n      });\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.response?.data?.message || \"Failed to check links\";\n      toast({\n        variant: \"destructive\",\n        description: errorMessage,\n      });\n    }\n  });\n\n  // Bulk operations mutations\n  const bulkDeleteMutation = useMutation({\n    mutationFn: async ({ ids, passcodes }: { ids: number[]; passcodes?: Record<string, string> }) => {\n      const response = await apiRequest(\"POST\", \"/api/bookmarks/bulk/delete\", {\n        ids,\n        passcodes\n      });\n      return response.json();\n    },\n    onSuccess: (result: { deletedIds: number[]; failed: { id: number; reason: string }[] }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookmarks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      \n      // Clear selections and exit bulk mode\n      setSelectedIds([]);\n      setBulkPasscodes({});\n      \n      const { deletedIds, failed } = result;\n      if (deletedIds.length > 0) {\n        toast({\n          description: `Successfully deleted ${deletedIds.length} bookmark(s)`,\n        });\n      }\n      \n      if (failed.length > 0) {\n        toast({\n          variant: \"destructive\", \n          description: `Failed to delete ${failed.length} bookmark(s): ${failed.map(f => f.reason).join(\", \")}`,\n        });\n      }\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.response?.data?.message || \"Failed to delete bookmarks\";\n      toast({\n        variant: \"destructive\",\n        description: errorMessage,\n      });\n    }\n  });\n\n  const bulkMoveMutation = useMutation({\n    mutationFn: async ({ ids, categoryId, passcodes }: { ids: number[]; categoryId: number | null; passcodes?: Record<string, string> }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/bookmarks/bulk/move\", {\n        ids,\n        categoryId,\n        passcodes\n      });\n      return response.json();\n    },\n    onSuccess: (result: { movedIds: number[]; failed: { id: number; reason: string }[] }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookmarks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      \n      // Clear selections and exit bulk mode\n      setSelectedIds([]);\n      setBulkPasscodes({});\n      \n      const { movedIds, failed } = result;\n      if (movedIds.length > 0) {\n        toast({\n          description: `Successfully moved ${movedIds.length} bookmark(s)`,\n        });\n      }\n      \n      if (failed.length > 0) {\n        toast({\n          variant: \"destructive\",\n          description: `Failed to move ${failed.length} bookmark(s): ${failed.map(f => f.reason).join(\", \")}`,\n        });\n      }\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.response?.data?.message || \"Failed to move bookmarks\";\n      toast({\n        variant: \"destructive\",\n        description: errorMessage,\n      });\n    }\n  });\n\n  // Bulk selection handlers\n  const handleBulkModeToggle = () => {\n    setBulkMode(!bulkMode);\n    if (bulkMode) {\n      // Exiting bulk mode - clear selections\n      setSelectedIds([]);\n      setBulkPasscodes({});\n    }\n  };\n\n  const handleSelectAll = () => {\n    if (selectedIds.length === filteredBookmarks.length) {\n      // Deselect all\n      setSelectedIds([]);\n    } else {\n      // Select all\n      setSelectedIds(filteredBookmarks.map(b => b.id));\n    }\n  };\n\n  const handleSelectBookmark = (bookmarkId: number, isSelected: boolean) => {\n    if (isSelected) {\n      setSelectedIds(prev => [...prev, bookmarkId]);\n    } else {\n      setSelectedIds(prev => prev.filter(id => id !== bookmarkId));\n      // Remove passcode if unselecting\n      setBulkPasscodes(prev => {\n        const { [bookmarkId.toString()]: removed, ...rest } = prev;\n        return rest;\n      });\n    }\n  };\n\n  const handleBulkDelete = () => {\n    if (selectedIds.length === 0) return;\n    setShowBulkDeleteDialog(true);\n  };\n\n  const confirmBulkDelete = () => {\n    if (selectedIds.length === 0) return;\n    \n    setIsBulkOperationLoading(true);\n    bulkDeleteMutation.mutate(\n      { ids: selectedIds, passcodes: Object.keys(bulkPasscodes).length > 0 ? bulkPasscodes : undefined },\n      {\n        onSettled: () => {\n          setIsBulkOperationLoading(false);\n          setShowBulkDeleteDialog(false);\n        }\n      }\n    );\n  };\n\n  const handleBulkMove = (categoryId: number | null) => {\n    if (selectedIds.length === 0) return;\n    \n    setIsBulkOperationLoading(true);\n    bulkMoveMutation.mutate(\n      { ids: selectedIds, categoryId, passcodes: Object.keys(bulkPasscodes).length > 0 ? bulkPasscodes : undefined },\n      {\n        onSettled: () => {\n          setIsBulkOperationLoading(false);\n        }\n      }\n    );\n  };\n\n  // Handle successful passcode verification\n  const handlePasscodeSuccess = (passcode: string) => {\n    if (selectedProtectedBookmark) {\n      // Add bookmark ID to unlocked set\n      setUnlockedBookmarks(\n        (prev) =>\n          new Set(Array.from(prev).concat(selectedProtectedBookmark.id)),\n      );\n\n      // Store the verified passcode for future operations\n      setUnlockedPasscodes((prev) => ({\n        ...prev,\n        [selectedProtectedBookmark.id]: passcode,\n      }));\n\n      // Close modal and clear selected bookmark\n      setIsPasscodeModalOpen(false);\n      setSelectedProtectedBookmark(null);\n    }\n  };\n\n  // Handle passcode modal close\n  const handlePasscodeModalClose = () => {\n    setIsPasscodeModalOpen(false);\n    setSelectedProtectedBookmark(null);\n  };\n\n  const handleCloseModal = () => {\n    setIsAddModalOpen(false);\n    setEditingBookmark(null);\n  };\n\n  const handleCloseViewModal = () => {\n    setViewingBookmark(null);\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setSelectedTags((prev) => prev.filter((tag) => tag !== tagToRemove));\n  };\n\n  const handleBulkCheckLinks = () => {\n    if (selectedIds.length > 0) {\n      // Check only selected bookmarks\n      bulkCheckLinksMutation.mutate({ ids: selectedIds, passcodes: bulkPasscodes });\n    } else {\n      // Check all bookmarks\n      bulkCheckLinksMutation.mutate({ ids: [] }); // Empty array means check all\n    }\n  };\n\n  // Helper function to get link status info for filtering\n  const getLinkStatusDisplayInfo = (status: string) => {\n    switch (status) {\n      case 'ok':\n        return {\n          label: 'Working Links',\n          icon: CheckCircle,\n          color: 'text-green-600 dark:text-green-400',\n          bgColor: 'bg-green-50 dark:bg-green-950',\n          borderColor: 'border-green-200 dark:border-green-800'\n        };\n      case 'broken':\n        return {\n          label: 'Broken Links',\n          icon: XCircle,\n          color: 'text-red-600 dark:text-red-400',\n          bgColor: 'bg-red-50 dark:bg-red-950',\n          borderColor: 'border-red-200 dark:border-red-800'\n        };\n      case 'timeout':\n        return {\n          label: 'Timeout Links',\n          icon: AlertCircle,\n          color: 'text-orange-600 dark:text-orange-400',\n          bgColor: 'bg-orange-50 dark:bg-orange-950',\n          borderColor: 'border-orange-200 dark:border-orange-800'\n        };\n      case 'unknown':\n        return {\n          label: 'Unchecked Links',\n          icon: HelpCircle,\n          color: 'text-gray-600 dark:text-gray-400',\n          bgColor: 'bg-gray-50 dark:bg-gray-950',\n          borderColor: 'border-gray-200 dark:border-gray-800'\n        };\n      default:\n        return null;\n    }\n  };\n\n  const clearFilters = () => {\n    setSearchQuery(\"\");\n    setSelectedCategory(\"\");\n    setSelectedTags([]);\n    setSelectedLinkStatus(\"\");\n  };\n\n  const hasActiveFilters =\n    searchQuery || selectedCategory || selectedTags.length > 0 || selectedLinkStatus;\n\n  if (!stats) {\n    return (\n      <div className=\"flex h-screen items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-primary border-t-transparent mx-auto mb-4\"></div>\n          <h2 className=\"text-lg font-medium text-foreground mb-2\">Memorize</h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Loading your bookmarks...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar\n        isOpen={isSidebarOpen}\n        onClose={() => setIsSidebarOpen(false)}\n        onCreateFolder={() => setIsAddCategoryModalOpen(true)}\n        stats={stats}\n      />\n\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header\n          className=\"bg-card border-b border-border px-6 py-4\"\n          data-testid=\"header\"\n        >\n          {/* Desktop Layout */}\n          <div className=\"hidden sm:flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4 min-w-0\">\n              <div className=\"relative flex-1 max-w-4xl\">\n                <Search\n                  className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n                  size={16}\n                />\n                <Input\n                  placeholder=\"Search anything\"\n                  className=\"pl-10 w-full\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                size=\"sm\"\n                variant={bulkMode ? \"default\" : \"outline\"}\n                onClick={handleBulkModeToggle}\n                data-testid=\"button-bulk-mode-toggle\"\n              >\n                {bulkMode ? <CheckSquare size={16} /> : <Square size={16} />}\n                <span className=\"ml-2\">Bulk Select</span>\n              </Button>\n\n              <div className=\"flex items-center bg-muted rounded-md p-1\">\n                <Button\n                  size=\"sm\"\n                  variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                  className=\"p-2 border-solid\"\n                  onClick={() => handleSetViewMode(\"grid\")}\n                  data-testid=\"button-grid-view\"\n                >\n                  <Grid size={16} />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                  className=\"p-2\"\n                  onClick={() => handleSetViewMode(\"list\")}\n                  data-testid=\"button-list-view\"\n                >\n                  <List size={16} />\n                </Button>\n              </div>\n\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n                data-testid=\"button-theme-toggle\"\n              >\n                {theme === \"light\" ? <Moon size={16} /> : <Sun size={16} />}\n              </Button>\n\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => logoutMutation.mutate()}\n                disabled={logoutMutation.isPending}\n                data-testid=\"button-logout\"\n                title=\"Logout\"\n              >\n                <LogOut size={16} />\n              </Button>\n            </div>\n          </div>\n\n          {/* Mobile Layout */}\n          <div className=\"sm:hidden space-y-3\">\n            {/* Top Row: Menu + Theme */}\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setIsSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <Menu size={20} />\n              </Button>\n\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n                  data-testid=\"button-theme-toggle\"\n                >\n                  {theme === \"light\" ? <Moon size={16} /> : <Sun size={16} />}\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => logoutMutation.mutate()}\n                  disabled={logoutMutation.isPending}\n                  data-testid=\"button-logout\"\n                  title=\"Logout\"\n                >\n                  <LogOut size={16} />\n                </Button>\n              </div>\n            </div>\n\n            {/* Bottom Section: Search Bar */}\n            <div className=\"relative\">\n              <Search\n                className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n                size={16}\n              />\n              <Input\n                placeholder=\"Search anything\"\n                className=\"pl-10 w-full\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n          </div>\n        </header>\n\n        {/* Filter Bar */}\n        <div\n          className=\"bg-card border-b border-border px-6 py-3\"\n          data-testid=\"filter-bar\"\n        >\n          {/* Desktop Layout - Single Line */}\n          <div className=\"hidden sm:flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-3\">\n                {/* Link Status Filter Dropdown */}\n                <Select\n                  value={selectedLinkStatus}\n                  onValueChange={setSelectedLinkStatus}\n                >\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-link-status\">\n                    <SelectValue placeholder=\"Link Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Filter size={14} className=\"text-muted-foreground\" />\n                        <span>All Links</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"ok\">\n                      <div className=\"flex items-center space-x-2\">\n                        <CheckCircle size={14} className=\"text-green-600\" />\n                        <span>Working</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"broken\">\n                      <div className=\"flex items-center space-x-2\">\n                        <XCircle size={14} className=\"text-red-600\" />\n                        <span>Broken</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"timeout\">\n                      <div className=\"flex items-center space-x-2\">\n                        <AlertCircle size={14} className=\"text-orange-600\" />\n                        <span>Timeout</span>\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"unknown\">\n                      <div className=\"flex items-center space-x-2\">\n                        <HelpCircle size={14} className=\"text-gray-600\" />\n                        <span>Unchecked</span>\n                      </div>\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n\n                {/* Active Link Status Filter Badge */}\n                {selectedLinkStatus && (() => {\n                  const statusInfo = getLinkStatusDisplayInfo(selectedLinkStatus);\n                  if (!statusInfo) return null;\n                  const StatusIcon = statusInfo.icon;\n                  return (\n                    <Badge\n                      className={`${statusInfo.color} ${statusInfo.bgColor} ${statusInfo.borderColor} flex items-center space-x-1 border`}\n                      data-testid={`active-filter-link-status-${selectedLinkStatus}`}\n                    >\n                      <StatusIcon size={12} />\n                      <span>{statusInfo.label}</span>\n                      <button\n                        onClick={() => setSelectedLinkStatus(\"\")}\n                        className=\"text-current/80 hover:text-current\"\n                      >\n                        <X size={12} />\n                      </button>\n                    </Badge>\n                  );\n                })()}\n\n                {/* Active Tags */}\n                {selectedTags.map((tag) => (\n                  <Badge\n                    key={tag}\n                    className=\"bg-primary text-primary-foreground flex items-center space-x-1\"\n                    data-testid={`active-filter-${tag.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                  >\n                    <span>{tag}</span>\n                    <button\n                      onClick={() => removeTag(tag)}\n                      className=\"text-primary-foreground/80 hover:text-primary-foreground\"\n                    >\n                      <X size={12} />\n                    </button>\n                  </Badge>\n                ))}\n                {hasActiveFilters && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={clearFilters}\n                    className=\"text-xs\"\n                    data-testid=\"button-clear-filters\"\n                  >\n                    Clear all\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Bulk Check Links Button */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleBulkCheckLinks}\n                disabled={bulkCheckLinksMutation.isPending}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-bulk-check-links\"\n                title={selectedIds.length > 0 ? `Check ${selectedIds.length} selected links` : \"Check all links\"}\n              >\n                {bulkCheckLinksMutation.isPending ? (\n                  <RefreshCw size={14} className=\"animate-spin\" />\n                ) : (\n                  <Link size={14} />\n                )}\n                <span>{selectedIds.length > 0 ? `Check ${selectedIds.length}` : \"Check All\"}</span>\n              </Button>\n\n              <Select\n                value={`${sortBy}-${sortOrder}`}\n                onValueChange={(value) => {\n                  const [newSortBy, newSortOrder] = value.split(\"-\") as [\n                    typeof sortBy,\n                    typeof sortOrder,\n                  ];\n                  setSortBy(newSortBy);\n                  setSortOrder(newSortOrder);\n                }}\n              >\n                <SelectTrigger className=\"w-56\" data-testid=\"select-sort\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"createdAt-desc\">\n                    Sort by Date Added\n                  </SelectItem>\n                  <SelectItem value=\"name-asc\">Sort by Name</SelectItem>\n                  <SelectItem value=\"isFavorite-desc\">\n                    Sort by Favorites\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Enhanced Bookmark Count with Link Stats */}\n              <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center space-x-2\">\n                  <span data-testid=\"bookmark-count\">\n                    {filteredBookmarks.length}\n                  </span>\n                  <span>bookmarks</span>\n                </div>\n                {stats?.linkStats && stats.linkStats.broken > 0 && (\n                  <div className=\"flex items-center space-x-1 text-red-600 dark:text-red-400\">\n                    <XCircle size={12} />\n                    <span data-testid=\"broken-links-count\">{stats.linkStats.broken}</span>\n                    <span>broken</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Mobile Layout - Two Lines */}\n          <div className=\"sm:hidden space-y-2\">\n            {/* Line 1: Filters Label + Tag Input + Active Filter Tags */}\n            <div className=\"flex items-center gap-3 flex-wrap\">\n              <div className=\"flex items-center gap-2 flex-wrap\">\n                {selectedTags.map((tag) => (\n                  <Badge\n                    key={tag}\n                    className=\"bg-primary text-primary-foreground flex items-center space-x-1\"\n                    data-testid={`active-filter-${tag.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                  >\n                    <span>{tag}</span>\n                    <button\n                      onClick={() => removeTag(tag)}\n                      className=\"text-primary-foreground/80 hover:text-primary-foreground\"\n                    >\n                      <X size={12} />\n                    </button>\n                  </Badge>\n                ))}\n                {hasActiveFilters && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={clearFilters}\n                    className=\"text-xs\"\n                    data-testid=\"button-clear-filters\"\n                  >\n                    Clear all\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Line 2: Sort Select + Bookmark Count */}\n            <div className=\"flex items-center justify-between gap-4\">\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <span data-testid=\"bookmark-count\">\n                  {filteredBookmarks.length}\n                </span>\n                <span>bookmarks</span>\n              </div>\n\n              <Select\n                value={`${sortBy}-${sortOrder}`}\n                onValueChange={(value) => {\n                  const [newSortBy, newSortOrder] = value.split(\"-\") as [\n                    typeof sortBy,\n                    typeof sortOrder,\n                  ];\n                  setSortBy(newSortBy);\n                  setSortOrder(newSortOrder);\n                }}\n              >\n                <SelectTrigger className=\"w-48\" data-testid=\"select-sort\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"createdAt-desc\">\n                    Sort by Date Added\n                  </SelectItem>\n                  <SelectItem value=\"name-asc\">Sort by Name</SelectItem>\n                  <SelectItem value=\"isFavorite-desc\">\n                    Sort by Favorites\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          {/* Bulk Action Toolbar */}\n          {bulkMode && (\n            <BulkActionToolbar\n              selectedCount={selectedIds.length}\n              totalCount={filteredBookmarks.length}\n              isAllSelected={selectedIds.length === filteredBookmarks.length && filteredBookmarks.length > 0}\n              onSelectAll={handleSelectAll}\n              onDeselectAll={() => setSelectedIds([])}\n              onBulkDelete={handleBulkDelete}\n              onBulkMove={handleBulkMove}\n              onExitBulkMode={handleBulkModeToggle}\n              isLoading={isBulkOperationLoading}\n            />\n          )}\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {Array.from({ length: 8 }).map((_, i) => (\n                <Card key={i} className=\"group\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-5 w-3/4 mb-2\" />\n                        <Skeleton className=\"h-4 w-full mb-1\" />\n                        <Skeleton className=\"h-4 w-2/3\" />\n                      </div>\n                      <div className=\"flex space-x-1\">\n                        <Skeleton className=\"h-8 w-8 rounded\" />\n                        <Skeleton className=\"h-8 w-8 rounded\" />\n                        <Skeleton className=\"h-8 w-8 rounded\" />\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <Skeleton className=\"h-3 w-3 rounded-full\" />\n                      <Skeleton className=\"h-3 w-24\" />\n                      <Skeleton className=\"h-3 w-1 rounded-full\" />\n                      <Skeleton className=\"h-3 w-16\" />\n                    </div>\n\n                    <div className=\"flex gap-1 mb-3\">\n                      <Skeleton className=\"h-5 w-12 rounded-full\" />\n                      <Skeleton className=\"h-5 w-16 rounded-full\" />\n                      <Skeleton className=\"h-5 w-10 rounded-full\" />\n                    </div>\n\n                    <Skeleton className=\"h-4 w-16\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredBookmarks.length > 0 ? (\n            <div\n              className={\n                viewMode === \"grid\"\n                  ? \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\"\n                  : \"space-y-4\"\n              }\n            >\n              {filteredBookmarks.map((bookmark) => {\n                const isUnlocked = unlockedBookmarks.has(bookmark.id);\n                const isProtected = bookmark.hasPasscode && !isUnlocked;\n                const passcode = unlockedPasscodes[bookmark.id];\n\n                return (\n                  <BookmarkCard\n                    key={bookmark.id}\n                    bookmark={bookmark}\n                    onEdit={handleEdit}\n                    onView={handleView}\n                    onShare={handleShare}\n                    onCopyShareLink={handleCopyShareLink}\n                    isProtected={isProtected}\n                    onUnlock={() => handleUnlockBookmark(bookmark)}\n                    onLock={() => handleLockBookmark(bookmark)}\n                    bulkMode={bulkMode}\n                    isSelected={selectedIds.includes(bookmark.id)}\n                    onSelect={handleSelectBookmark}\n                    passcode={passcode}\n                    isShareLoading={shareBookmarkMutation.isPending}\n                  />\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\" data-testid=\"empty-state\">\n              <div className=\"w-24 h-24 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Filter className=\"text-muted-foreground\" size={32} />\n              </div>\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                No bookmarks found\n              </h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {hasActiveFilters\n                  ? \"Try adjusting your search criteria or clearing filters.\"\n                  : \"Get started by adding your first bookmark.\"}\n              </p>\n              <Button onClick={() => setIsAddModalOpen(true)}>\n                Add Your First Bookmark\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Floating Action Button */}\n        <Button\n          onClick={() => setIsAddModalOpen(true)}\n          className=\"fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg hover:shadow-md hover:scale-110 transition-all duration-300 ease-out z-50 p-0 flex items-center justify-center\"\n          data-testid=\"button-add-bookmark-fab\"\n        >\n          <Plus size={24} />\n        </Button>\n      </main>\n\n      <AddBookmarkModal\n        isOpen={isAddModalOpen}\n        onClose={handleCloseModal}\n        editingBookmark={editingBookmark}\n      />\n\n      <BookmarkDetailsModal\n        isOpen={!!viewingBookmark}\n        onClose={handleCloseViewModal}\n        bookmark={viewingBookmark}\n      />\n\n      <AddCategoryModal\n        isOpen={isAddCategoryModalOpen}\n        onClose={() => setIsAddCategoryModalOpen(false)}\n      />\n\n      <PasscodeModal\n        isOpen={isPasscodeModalOpen}\n        onClose={handlePasscodeModalClose}\n        bookmark={selectedProtectedBookmark || undefined}\n        onSuccess={handlePasscodeSuccess}\n      />\n    </div>\n  );\n}\n\nexport default function Bookmarks() {\n  return (\n    <ThemeProvider>\n      <BookmarksContent />\n    </ThemeProvider>\n  );\n}\n",
      "size_bytes": 42783
    },
    "client/src/pages/not-found.tsx": {
      "content": "import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "size_bytes": 711
    },
    "client/src/components/ui/accordion.tsx": {
      "content": "import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "size_bytes": 1977
    },
    "client/src/components/ui/alert-dialog.tsx": {
      "content": "import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
      "size_bytes": 4420
    },
    "client/src/components/ui/alert.tsx": {
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
      "size_bytes": 1584
    },
    "client/src/components/ui/aspect-ratio.tsx": {
      "content": "import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
      "size_bytes": 140
    },
    "client/src/components/ui/avatar.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "size_bytes": 1419
    },
    "client/src/components/ui/badge.tsx": {
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "size_bytes": 1128
    },
    "client/src/components/ui/breadcrumb.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
      "size_bytes": 2712
    },
    "client/src/components/ui/button.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 ease-in-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/95 hover:scale-105\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/95 hover:scale-105\",\n        outline:\n          \"border border-input bg-background hover:bg-accent/50 hover:text-accent-foreground hover:border-accent/20\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/90 hover:scale-105\",\n        ghost: \"hover:bg-accent/30 hover:text-accent-foreground hover:scale-105\",\n        link: \"text-primary underline-offset-4 hover:underline hover:text-primary/80\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "size_bytes": 2038
    },
    "client/src/components/ui/calendar.tsx": {
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
      "size_bytes": 2695
    },
    "client/src/components/ui/card.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "size_bytes": 1858
    },
    "client/src/components/ui/carousel.tsx": {
      "content": "import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
      "size_bytes": 6210
    },
    "client/src/components/ui/chart.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
      "size_bytes": 10481
    },
    "client/src/components/ui/checkbox.tsx": {
      "content": "import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
      "size_bytes": 1056
    },
    "client/src/components/ui/collapsible.tsx": {
      "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
      "size_bytes": 329
    },
    "client/src/components/ui/command.tsx": {
      "content": "import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
      "size_bytes": 4885
    },
    "client/src/components/ui/context-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
      "size_bytes": 7428
    },
    "client/src/components/ui/dialog.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
      "size_bytes": 3848
    },
    "client/src/components/ui/drawer.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
      "size_bytes": 3021
    },
    "client/src/components/ui/dropdown-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
      "size_bytes": 7609
    },
    "client/src/components/ui/form.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
      "size_bytes": 4120
    },
    "client/src/components/ui/hover-card.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
      "size_bytes": 1251
    },
    "client/src/components/ui/input-otp.tsx": {
      "content": "import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
      "size_bytes": 2154
    },
    "client/src/components/ui/input.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "size_bytes": 791
    },
    "client/src/components/ui/label.tsx": {
      "content": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
      "size_bytes": 710
    },
    "client/src/components/ui/menubar.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
      "size_bytes": 8605
    },
    "client/src/components/ui/navigation-menu.tsx": {
      "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
      "size_bytes": 5128
    },
    "client/src/components/ui/pagination.tsx": {
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n",
      "size_bytes": 2751
    },
    "client/src/components/ui/popover.tsx": {
      "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
      "size_bytes": 1280
    },
    "client/src/components/ui/progress.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
      "size_bytes": 791
    },
    "client/src/components/ui/radio-group.tsx": {
      "content": "import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
      "size_bytes": 1467
    },
    "client/src/components/ui/resizable.tsx": {
      "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
      "size_bytes": 1723
    },
    "client/src/components/ui/scroll-area.tsx": {
      "content": "import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
      "size_bytes": 1642
    },
    "client/src/components/ui/select.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
      "size_bytes": 5742
    },
    "client/src/components/ui/separator.tsx": {
      "content": "import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
      "size_bytes": 756
    },
    "client/src/components/ui/sheet.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
      "size_bytes": 4281
    },
    "client/src/components/ui/sidebar.tsx": {
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
      "size_bytes": 23567
    },
    "client/src/components/ui/skeleton.tsx": {
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "size_bytes": 261
    },
    "client/src/components/ui/slider.tsx": {
      "content": "import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "size_bytes": 1077
    },
    "client/src/components/ui/switch.tsx": {
      "content": "import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
      "size_bytes": 1139
    },
    "client/src/components/ui/table.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "size_bytes": 2765
    },
    "client/src/components/ui/tabs.tsx": {
      "content": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "size_bytes": 1883
    },
    "client/src/components/ui/textarea.tsx": {
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
      "size_bytes": 689
    },
    "client/src/components/ui/toast.tsx": {
      "content": "import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
      "size_bytes": 4845
    },
    "client/src/components/ui/toaster.tsx": {
      "content": "import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
      "size_bytes": 772
    },
    "client/src/components/ui/toggle-group.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n",
      "size_bytes": 1753
    },
    "client/src/components/ui/toggle.tsx": {
      "content": "import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
      "size_bytes": 1527
    },
    "client/src/components/ui/tooltip.tsx": {
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
      "size_bytes": 1209
    },
    "replit.md": {
      "content": "# Bookmark Manager Application\n\n## Overview\n\nThis is a full-stack bookmark manager application built with React, Express, and PostgreSQL. The application allows users to organize, categorize, and manage their bookmarks with features like search, filtering, tagging, and favorites. It provides a modern, responsive interface using shadcn/ui components and supports both light and dark themes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nFavicon preference: Simple, non-colorful favicon (implemented as minimal bookmark icon).\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with support for category-based URLs\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: shadcn/ui components built on top of Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming support\n- **Form Handling**: React Hook Form with Zod validation for type-safe forms\n\n### Backend Architecture  \n- **Framework**: Express.js with TypeScript for the REST API server\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful endpoints for bookmarks, categories, and statistics\n- **Middleware**: Custom logging middleware for API request tracking\n- **Development**: Hot reload support with Vite integration in development mode\n\n### Data Storage\n- **Database**: PostgreSQL with Neon serverless for scalable cloud hosting\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Data Models**: \n  - Bookmarks with name, URL, description, tags, favorites, and category relationships\n  - Hierarchical categories with parent-child relationships\n  - Users table (prepared for authentication features)\n\n### Key Features\n- **Search & Filtering**: Full-text search across bookmarks with category and tag filtering\n- **Organization**: Hierarchical category system and flexible tagging\n- **Favorites**: Mark important bookmarks for quick access\n- **Responsive Design**: Mobile-first approach with collapsible sidebar navigation\n- **Theme Support**: Light/dark mode toggle with persistent user preferences\n- **Real-time Updates**: Optimistic updates and automatic cache invalidation\n\n### Development Tools\n- **Type Safety**: Full TypeScript coverage across frontend, backend, and shared schemas\n- **Code Quality**: ESLint and Prettier configuration for consistent code formatting\n- **Build System**: Vite for fast development and optimized production builds\n- **Path Aliases**: Configured import aliases for cleaner code organization\n\n## External Dependencies\n\n### Database & Storage\n- **Neon Database**: Serverless PostgreSQL database with websocket support\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL dialect\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### UI & Styling\n- **Radix UI**: Headless UI components for accessibility and customization\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Icon library for consistent iconography\n- **date-fns**: Date manipulation and formatting utilities\n\n### Development & Build\n- **Vite**: Fast build tool with React plugin and runtime error overlay\n- **esbuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n\n### Forms & Validation\n- **React Hook Form**: Performant forms with minimal re-renders\n- **Zod**: TypeScript-first schema validation\n- **Hookform Resolvers**: Integration between React Hook Form and Zod\n\n### State Management & Data Fetching\n- **TanStack Query**: Server state management with caching and synchronization\n- **Wouter**: Lightweight client-side routing library\n\n### Utilities\n- **class-variance-authority**: Utility for creating component variants\n- **clsx**: Conditional class name utility\n- **nanoid**: URL-safe unique ID generator",
      "size_bytes": 4003
    },
    "client/src/components/add-category-modal.tsx": {
      "content": "import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { insertCategorySchema, type InsertCategory } from \"@shared/schema\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ntype FormData = InsertCategory;\n\ninterface AddCategoryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddCategoryModal({ isOpen, onClose }: AddCategoryModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(insertCategorySchema),\n    defaultValues: {\n      name: \"\",\n      parentId: null,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertCategory) => {\n      return await apiRequest(\"POST\", \"/api/categories\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories?withCounts=true\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        description: \"Folder created successfully!\",\n      });\n      handleClose();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to create folder\",\n      });\n    }\n  });\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  const onSubmit = (data: FormData) => {\n    createMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent data-testid=\"add-category-modal\">\n        <DialogHeader>\n          <DialogTitle>Create New Folder</DialogTitle>\n          <DialogDescription>\n            Create a new folder to organize your bookmarks\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Folder Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter folder name...\"\n                      {...field}\n                      data-testid=\"input-folder-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={createMutation.isPending}\n                data-testid=\"button-cancel-folder\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createMutation.isPending}\n                data-testid=\"button-save-folder\"\n              >\n                {createMutation.isPending ? \"Creating...\" : \"Create Folder\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}",
      "size_bytes": 3585
    },
    "client/src/components/passcode-modal.tsx": {
      "content": "import { useState, useEffect } from \"react\";\nimport { Lock } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\n\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Bookmark } from \"@shared/schema\";\n\n// Form validation schema\nconst passcodeFormSchema = z.object({\n  passcode: z.string()\n    .min(4, \"Passcode must be at least 4 characters long\")\n    .max(64, \"Passcode must be no more than 64 characters long\"),\n});\n\ntype PasscodeFormData = z.infer<typeof passcodeFormSchema>;\n\ninterface PasscodeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  bookmark?: Bookmark;\n  onSuccess: (passcode: string) => void;\n}\n\nexport function PasscodeModal({ isOpen, onClose, bookmark, onSuccess }: PasscodeModalProps) {\n  const { toast } = useToast();\n  const [submitError, setSubmitError] = useState<string>(\"\");\n\n  const form = useForm<PasscodeFormData>({\n    resolver: zodResolver(passcodeFormSchema),\n    defaultValues: {\n      passcode: \"\",\n    },\n  });\n\n  // Clear form and errors when modal opens/closes\n  useEffect(() => {\n    if (isOpen) {\n      form.reset({ passcode: \"\" });\n      setSubmitError(\"\");\n      // Auto-focus on passcode input\n      setTimeout(() => {\n        const input = document.getElementById('passcode-input');\n        if (input) {\n          input.focus();\n        }\n      }, 100);\n    } else {\n      form.reset({ passcode: \"\" });\n      setSubmitError(\"\");\n    }\n  }, [isOpen, form]);\n\n  // Clear errors when user starts typing\n  useEffect(() => {\n    const subscription = form.watch((value, { name }) => {\n      if (name === 'passcode' && submitError) {\n        setSubmitError(\"\");\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, [form, submitError]);\n\n  const verifyPasscodeMutation = useMutation({\n    mutationFn: async (data: PasscodeFormData) => {\n      if (!bookmark?.id) {\n        throw new Error(\"Bookmark ID is required\");\n      }\n\n      const response = await apiRequest(\"POST\", `/api/bookmarks/${bookmark.id}/verify-passcode`, {\n        passcode: data.passcode,\n      });\n\n      return await response.json() as { valid: boolean };\n    },\n    onSuccess: (data) => {\n      if (data.valid) {\n        const passcode = form.getValues(\"passcode\");\n        toast({\n          description: \"Access granted! Opening bookmark...\",\n        });\n        onSuccess(passcode);\n        handleClose();\n      } else {\n        setSubmitError(\"Incorrect passcode. Please try again.\");\n        form.setFocus(\"passcode\");\n      }\n    },\n    onError: (error: any) => {\n      console.error(\"Passcode verification error:\", error);\n      \n      // Handle different types of errors\n      if (error.message?.includes(\"Too many\")) {\n        setSubmitError(\"Too many attempts. Please wait 15 minutes before trying again.\");\n      } else if (error.message?.includes(\"rate limit\") || error.status === 429) {\n        setSubmitError(\"Too many passcode attempts. Please wait before trying again.\");\n      } else if (error.message?.includes(\"Bookmark not found\")) {\n        setSubmitError(\"This bookmark no longer exists.\");\n      } else if (error.message?.includes(\"Invalid passcode format\")) {\n        setSubmitError(\"Invalid passcode format. Please check your input.\");\n      } else if (error.message?.includes(\"network\") || error.code === 'NETWORK_ERROR') {\n        setSubmitError(\"Network error. Please check your connection and try again.\");\n      } else {\n        setSubmitError(\"Unable to verify passcode. Please try again.\");\n      }\n\n      toast({\n        variant: \"destructive\",\n        description: \"Failed to verify passcode\",\n      });\n    }\n  });\n\n  const handleClose = () => {\n    form.reset({ passcode: \"\" });\n    setSubmitError(\"\");\n    onClose();\n  };\n\n  const onSubmit = (data: PasscodeFormData) => {\n    setSubmitError(\"\");\n    verifyPasscodeMutation.mutate(data);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !verifyPasscodeMutation.isPending) {\n      e.preventDefault();\n      form.handleSubmit(onSubmit)();\n    }\n  };\n\n  if (!bookmark) {\n    return null;\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"modal-passcode\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\" data-testid=\"modal-title-passcode\">\n            <Lock size={20} className=\"text-muted-foreground\" />\n            Protected Bookmark\n          </DialogTitle>\n          <DialogDescription data-testid=\"modal-description-passcode\">\n            Enter the passcode to access \"{bookmark.name}\"\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"passcode-input\" className=\"text-sm font-medium\">\n              Passcode\n            </Label>\n            <Input\n              id=\"passcode-input\"\n              type=\"password\"\n              placeholder=\"Enter passcode\"\n              {...form.register(\"passcode\")}\n              onKeyDown={handleKeyDown}\n              disabled={verifyPasscodeMutation.isPending}\n              data-testid=\"input-passcode-verify\"\n              autoComplete=\"off\"\n            />\n            {form.formState.errors.passcode && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-passcode-format\">\n                {form.formState.errors.passcode.message}\n              </p>\n            )}\n            {submitError && (\n              <p className=\"text-sm text-destructive\" data-testid=\"error-passcode-verify\">\n                {submitError}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={verifyPasscodeMutation.isPending}\n              data-testid=\"button-cancel-passcode\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={verifyPasscodeMutation.isPending || !form.watch(\"passcode\")}\n              data-testid=\"button-verify-passcode\"\n            >\n              {verifyPasscodeMutation.isPending ? \"Verifying...\" : \"Unlock\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}",
      "size_bytes": 6821
    },
    "client/src/components/markdown-editor.tsx": {
      "content": "import { useState } from \"react\";\nimport { Eye, Edit, HelpCircle } from \"lucide-react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface MarkdownEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  error?: string;\n  id?: string;\n  \"data-testid\"?: string;\n}\n\nconst MARKDOWN_HELP = `\n**Bold** or __bold__\n*Italic* or _italic_\n[Link](https://example.com)\n\\`inline code\\`\n\n# Heading 1\n## Heading 2\n### Heading 3\n\n- Unordered list\n1. Ordered list\n\n> Blockquote\n\n\\`\\`\\`\nCode block\n\\`\\`\\`\n\n---\nHorizontal rule\n`;\n\nexport function MarkdownEditor({\n  value,\n  onChange,\n  placeholder = \"Enter markdown description...\",\n  disabled = false,\n  error,\n  id,\n  \"data-testid\": testId,\n}: MarkdownEditorProps) {\n  const [activeTab, setActiveTab] = useState<\"edit\" | \"preview\">(\"edit\");\n\n  const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    onChange(e.target.value);\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center justify-between\">\n        <Label className=\"text-sm font-medium\">Description</Label>\n        <div className=\"flex items-center space-x-2\">\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-6 w-6 p-0 text-muted-foreground hover:text-foreground\"\n                data-testid=\"button-markdown-help\"\n              >\n                <HelpCircle size={14} />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent \n              className=\"w-80 text-xs\" \n              side=\"left\"\n              data-testid=\"popover-markdown-help\"\n            >\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-sm\">Markdown Quick Reference</h4>\n                <div className=\"whitespace-pre-line text-muted-foreground font-mono\">\n                  {MARKDOWN_HELP.trim()}\n                </div>\n              </div>\n            </PopoverContent>\n          </Popover>\n        </div>\n      </div>\n\n      <Tabs \n        value={activeTab} \n        onValueChange={(value) => setActiveTab(value as \"edit\" | \"preview\")}\n        className=\"w-full\"\n      >\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger \n            value=\"edit\" \n            className=\"flex items-center space-x-2\"\n            data-testid=\"tab-edit\"\n          >\n            <Edit size={14} />\n            <span>Edit</span>\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"preview\" \n            className=\"flex items-center space-x-2\"\n            data-testid=\"tab-preview\"\n          >\n            <Eye size={14} />\n            <span>Preview</span>\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"edit\" className=\"mt-3\">\n          <Textarea\n            id={id}\n            value={value}\n            onChange={handleTextareaChange}\n            placeholder={placeholder}\n            disabled={disabled}\n            rows={10}\n            className=\"resize-y min-h-[240px] font-mono text-sm\"\n            data-testid={testId}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"preview\" className=\"mt-3\">\n          <div \n            className=\"min-h-[240px] p-3 border rounded-md bg-background\"\n            data-testid=\"markdown-preview\"\n          >\n            {value.trim() ? (\n              <div className=\"prose prose-sm max-w-none dark:prose-invert prose-headings:font-semibold prose-h1:text-lg prose-h2:text-base prose-h3:text-sm prose-p:text-sm prose-a:text-primary prose-strong:text-foreground prose-code:text-sm prose-code:bg-muted prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-pre:bg-muted prose-pre:text-sm prose-blockquote:border-l-primary prose-li:text-sm\">\n                <ReactMarkdown\n                  remarkPlugins={[remarkGfm]}\n                >\n                  {value}\n                </ReactMarkdown>\n              </div>\n            ) : (\n              <div className=\"text-muted-foreground italic text-sm\">\n                {placeholder}\n              </div>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {error && (\n        <p className=\"text-sm text-destructive\" data-testid=\"error-description\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n}",
      "size_bytes": 4758
    },
    "client/src/hooks/use-auth.tsx": {
      "content": "// Authentication hook based on javascript_auth_all_persistance integration blueprint\nimport { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      // Clear all cached data when switching users\n      queryClient.clear();\n      queryClient.setQueryData([\"/api/user\"], user);\n      // Store username in localStorage for future logins\n      localStorage.setItem(\"bookmark_manager_username\", user.username);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      // Clear all cached data for new user\n      queryClient.clear();\n      queryClient.setQueryData([\"/api/user\"], user);\n      // Store username in localStorage for future logins\n      localStorage.setItem(\"bookmark_manager_username\", user.username);\n      toast({\n        title: \"Registration successful\",\n        description: \"Welcome to Bookmark Manager!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      // Clear all cached data on logout\n      queryClient.clear();\n      queryClient.setQueryData([\"/api/user\"], null);\n      // Keep username in localStorage for future logins\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\n// Helper function to get stored username\nexport function getStoredUsername(): string | null {\n  return localStorage.getItem(\"bookmark_manager_username\");\n}",
      "size_bytes": 3925
    },
    "client/src/lib/protected-route.tsx": {
      "content": "// Protected route component based on javascript_auth_all_persistance integration blueprint\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen bg-background\">\n          <div className=\"text-center\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary mx-auto mb-4\" />\n            <h2 className=\"text-lg font-medium text-foreground mb-2\">Authenticating</h2>\n            <p className=\"text-sm text-muted-foreground\">Please wait...</p>\n          </div>\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}",
      "size_bytes": 1049
    },
    "client/src/pages/auth-page.tsx": {
      "content": "// Authentication page with custom 4-digit password UI\nimport { useState, useEffect, useRef } from \"react\";\nimport { useAuth, getStoredUsername } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useLocation } from \"wouter\";\nimport { Bookmark, Shield, Users, Search } from \"lucide-react\";\n\n// iPhone-style passcode input component\nfunction PasscodeInput({ \n  value, \n  onChange, \n  placeholder = \"Enter 4-digit password\",\n  disabled = false\n}: { \n  value: string; \n  onChange: (value: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value.replace(/\\D/g, \"\").slice(0, 4);\n    onChange(newValue);\n  };\n\n  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const pastedText = e.clipboardData.getData(\"text\").replace(/\\D/g, \"\").slice(0, 4);\n    onChange(pastedText);\n  };\n\n  const handleCircleClick = () => {\n    if (!disabled && inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <Label className=\"text-sm font-medium text-center block\">{placeholder}</Label>\n      <div className=\"relative\">\n        {/* Hidden input for capture */}\n        <input\n          ref={inputRef}\n          type=\"tel\"\n          inputMode=\"numeric\"\n          maxLength={4}\n          value={value}\n          onChange={handleInputChange}\n          onPaste={handlePaste}\n          disabled={disabled}\n          className=\"sr-only\"\n          autoComplete=\"one-time-code\"\n          aria-label=\"4-digit passcode\"\n        />\n        \n        {/* Visual circles */}\n        <div className=\"flex items-center justify-center gap-1.5\">\n          {[0, 1, 2, 3].map((index) => {\n            const isFilled = index < value.length;\n            const isActive = index === value.length && value.length < 4;\n            \n            return (\n              <button\n                key={index}\n                type=\"button\"\n                onClick={handleCircleClick}\n                disabled={disabled}\n                className={`\n                  size-5 rounded-full border bg-background flex items-center justify-center \n                  transition-all duration-150 ring-offset-background\n                  ${isActive ? \"ring-1 ring-primary border-primary\" : \"border-input\"}\n                  ${disabled ? \"opacity-50 cursor-not-allowed\" : \"hover:border-ring cursor-pointer\"}\n                `}\n                data-testid={`dot-password-digit-${index}`}\n                data-filled={isFilled}\n                aria-hidden=\"true\"\n              >\n                {isFilled && (\n                  <span \n                    className=\"size-1.5 rounded-full bg-foreground transition-transform duration-150 animate-in zoom-in-50\"\n                  />\n                )}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [, setLocation] = useLocation();\n  const [isRegisterMode, setIsRegisterMode] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showUsernameInput, setShowUsernameInput] = useState(true);\n  const usernameInputRef = useRef<HTMLInputElement>(null);\n\n  // Check for stored username on component mount\n  useEffect(() => {\n    const storedUsername = getStoredUsername();\n    if (storedUsername) {\n      setUsername(storedUsername);\n      setShowUsernameInput(false); // Skip username input if already stored\n    }\n  }, []);\n\n  // Redirect to home if already authenticated\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/\");\n    }\n  }, [user, setLocation]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (password.length !== 4) {\n      return; // Don't submit if password isn't 4 digits\n    }\n\n    if (isRegisterMode) {\n      registerMutation.mutate({ username, password });\n    } else {\n      loginMutation.mutate({ username, password });\n    }\n  };\n\n  const handleModeSwitch = () => {\n    const nextMode = !isRegisterMode;\n    setIsRegisterMode(nextMode);\n    setPassword(\"\"); // Clear password when switching modes\n    \n    // Show username input for registration or if no stored username for login\n    const storedUsername = getStoredUsername();\n    setShowUsernameInput(nextMode ? true : !storedUsername);\n  };\n\n  const handleUsernameChange = () => {\n    setShowUsernameInput(true);\n    setUsername(\"\");\n  };\n\n  // Focus username input when it becomes visible\n  useEffect(() => {\n    if (showUsernameInput && usernameInputRef.current) {\n      usernameInputRef.current.focus();\n    }\n  }, [showUsernameInput]);\n\n  if (user) {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted flex\">\n      {/* Left Column - Auth Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-bold\">\n              {isRegisterMode ? \"Create Account\" : \"Welcome Back\"}\n            </CardTitle>\n            <CardDescription>\n              {isRegisterMode \n                ? \"Create your account to start organizing your bookmarks\"\n                : \"Sign in to access your bookmark collection\"\n              }\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {/* Username Input - Show conditionally */}\n              {showUsernameInput && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input\n                    ref={usernameInputRef}\n                    id=\"username\"\n                    type=\"text\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    placeholder=\"Enter your username\"\n                    required\n                    data-testid=\"input-username\"\n                  />\n                </div>\n              )}\n\n              {/* Show current username as a clean label */}\n              {!showUsernameInput && (\n                <div className=\"space-y-2\">\n                  <Label>Signing in as</Label>\n                  <div className=\"flex items-center justify-between px-3 py-2 bg-muted rounded-md select-none\" tabIndex={-1}>\n                    <span className=\"font-medium\" data-testid=\"text-current-username\">{username}</span>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleUsernameChange}\n                      disabled={loginMutation.isPending || registerMutation.isPending}\n                      data-testid=\"button-change-username\"\n                    >\n                      Change\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* iPhone-style Passcode Input */}\n              <PasscodeInput\n                value={password}\n                onChange={setPassword}\n                placeholder={isRegisterMode ? \"Create 4-digit password\" : \"Enter your 4-digit password\"}\n                disabled={loginMutation.isPending || registerMutation.isPending}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={password.length !== 4 || !username || loginMutation.isPending || registerMutation.isPending}\n                data-testid={isRegisterMode ? \"button-register\" : \"button-login\"}\n              >\n                {(loginMutation.isPending || registerMutation.isPending) \n                  ? \"Please wait...\" \n                  : (isRegisterMode ? \"Create Account\" : \"Sign In\")\n                }\n              </Button>\n            </form>\n\n            <div className=\"text-center\">\n              <Button\n                variant=\"link\"\n                onClick={handleModeSwitch}\n                data-testid=\"button-switch-mode\"\n              >\n                {isRegisterMode \n                  ? \"Already have an account? Sign in\" \n                  : \"Don't have an account? Sign up\"\n                }\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Right Column - Hero Section */}\n      <div className=\"flex-1 bg-primary text-primary-foreground p-8 flex flex-col justify-center\">\n        <div className=\"max-w-lg\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-3 bg-primary-foreground/10 rounded-lg\">\n              <Bookmark className=\"h-8 w-8\" />\n            </div>\n            <h1 className=\"text-3xl font-bold\">Memorize</h1>\n          </div>\n          \n          <h2 className=\"text-4xl font-bold mb-6\">\n            Organize Your Digital Life\n          </h2>\n          \n          <p className=\"text-xl text-primary-foreground/80 mb-8\">\n            Keep all your important bookmarks organized, searchable, and secure in one place.\n          </p>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-3\">\n              <Search className=\"h-5 w-5 text-primary-foreground/60\" />\n              <span>Powerful search and filtering</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Users className=\"h-5 w-5 text-primary-foreground/60\" />\n              <span>Organize with categories and tags</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Shield className=\"h-5 w-5 text-primary-foreground/60\" />\n              <span>Secure with passcode protection</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "size_bytes": 10319
    },
    "server/auth.ts": {
      "content": "// Authentication system using blueprint patterns from javascript_auth_all_persistance integration\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  // Get or generate session secret\n  const sessionSecret = process.env.SESSION_SECRET || \"dev-secret-change-in-production\";\n  \n  const sessionSettings: session.SessionOptions = {\n    secret: sessionSecret,\n    resave: false,\n    saveUninitialized: false,\n    rolling: true, // Extend session on activity\n    store: storage.sessionStore,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      sameSite: 'lax', // CSRF protection\n      maxAge: 30 * 60 * 1000, // 30 minutes timeout as requested\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const user = await storage.createUser({\n        ...req.body,\n        password: await hashPassword(req.body.password),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n\n// Middleware to require authentication\nexport function requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\nexport { hashPassword };",
      "size_bytes": 3660
    },
    "client/src/components/bookmark-details-modal.tsx": {
      "content": "import { ExternalLink, Calendar, Tag, Folder, Lock } from \"lucide-react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport type { Bookmark, Category } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface BookmarkDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  bookmark: Bookmark & { category?: Category; hasPasscode?: boolean };\n}\n\nexport function BookmarkDetailsModal({ isOpen, onClose, bookmark }: BookmarkDetailsModalProps) {\n  const getDomain = (url: string) => {\n    try {\n      return new URL(url).hostname;\n    } catch {\n      return url;\n    }\n  };\n\n  const handleVisit = () => {\n    if (bookmark) {\n      window.open(bookmark.url, '_blank', 'noopener,noreferrer');\n    }\n  };\n\n  if (!bookmark) {\n    return null;\n  }\n\n  const timeAgo = formatDistanceToNow(new Date(bookmark.createdAt), { addSuffix: true });\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-bookmark-details\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-xl\" data-testid=\"bookmark-details-title\">\n            {bookmark.hasPasscode && (\n              <Lock size={18} className=\"text-muted-foreground flex-shrink-0\" />\n            )}\n            <span className=\"line-clamp-2\">{bookmark.name}</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* URL Section */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <ExternalLink size={14} />\n                <span className=\"font-medium\">Website</span>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleVisit}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-visit-bookmark\"\n              >\n                <span>Visit</span>\n                <ExternalLink size={12} />\n              </Button>\n            </div>\n            <div className=\"bg-muted/50 rounded-lg p-3\">\n              <p className=\"text-sm font-mono break-all\" data-testid=\"bookmark-url\">\n                {bookmark.url}\n              </p>\n              <p className=\"text-xs text-muted-foreground mt-1\" data-testid=\"bookmark-domain\">\n                {getDomain(bookmark.url)}\n              </p>\n            </div>\n          </div>\n\n          {/* Description Section */}\n          {bookmark.description && (\n            <>\n              <Separator />\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <span className=\"font-medium\">Description</span>\n                </div>\n                <div \n                  className=\"prose prose-sm max-w-none dark:prose-invert prose-headings:font-semibold prose-h1:text-lg prose-h2:text-base prose-h3:text-sm prose-p:text-sm prose-a:text-primary prose-strong:text-foreground prose-code:text-sm prose-code:bg-muted prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-pre:bg-muted prose-pre:text-sm prose-blockquote:border-l-primary prose-li:text-sm\"\n                  data-testid=\"bookmark-description-rendered\"\n                >\n                  <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                    {bookmark.description}\n                  </ReactMarkdown>\n                </div>\n              </div>\n            </>\n          )}\n\n          {/* Tags Section */}\n          {bookmark.tags && bookmark.tags.length > 0 && (\n            <>\n              <Separator />\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Tag size={14} />\n                  <span className=\"font-medium\">Tags</span>\n                </div>\n                <div className=\"flex flex-wrap gap-2\">\n                  {bookmark.tags.map((tag, index) => (\n                    <Badge\n                      key={index}\n                      variant=\"secondary\"\n                      className=\"text-xs\"\n                      data-testid={`tag-${tag.toLowerCase().replace(/\\s+/g, '-')}-details`}\n                    >\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n\n          {/* Category Section */}\n          {bookmark.category && (\n            <>\n              <Separator />\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Folder size={14} />\n                  <span className=\"font-medium\">Folder</span>\n                </div>\n                <Badge variant=\"outline\" className=\"text-sm\" data-testid=\"bookmark-category-details\">\n                  {bookmark.category.name}\n                </Badge>\n              </div>\n            </>\n          )}\n\n          {/* Metadata Section */}\n          <Separator />\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Calendar size={14} />\n              <span className=\"font-medium\">Details</span>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-muted-foreground\">Created:</span>\n                <p className=\"font-medium\" data-testid=\"bookmark-created-date\">\n                  {timeAgo}\n                </p>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Favorite:</span>\n                <p className=\"font-medium\" data-testid=\"bookmark-favorite-status\">\n                  {bookmark.isFavorite ? \"Yes\" : \"No\"}\n                </p>\n              </div>\n              {bookmark.hasPasscode && (\n                <div className=\"col-span-2\">\n                  <span className=\"text-muted-foreground\">Protection:</span>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      <Lock size={10} className=\"mr-1\" />\n                      Protected with passcode\n                    </Badge>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}",
      "size_bytes": 6822
    },
    "client/src/pages/shared-bookmark.tsx": {
      "content": "import { useEffect, useState } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { ExternalLink, Calendar, Tag, Folder, Globe, ArrowLeft } from \"lucide-react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Bookmark, Category } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport function SharedBookmark() {\n  const [, params] = useRoute(\"/shared/:shareId\");\n  const [bookmark, setBookmark] = useState<(Bookmark & { category?: Category }) | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!params?.shareId) {\n      setError(\"Invalid share link\");\n      setIsLoading(false);\n      return;\n    }\n\n    const fetchSharedBookmark = async () => {\n      try {\n        const response = await fetch(`/api/shared/${params.shareId}`);\n        \n        if (response.status === 404) {\n          setError(\"Bookmark not found or is no longer shared\");\n          setIsLoading(false);\n          return;\n        }\n        \n        if (!response.ok) {\n          throw new Error(\"Failed to load bookmark\");\n        }\n        \n        const data = await response.json();\n        setBookmark(data);\n      } catch (err) {\n        console.error(\"Error fetching shared bookmark:\", err);\n        setError(\"Failed to load bookmark\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchSharedBookmark();\n  }, [params?.shareId]);\n\n  const getDomain = (url: string) => {\n    try {\n      return new URL(url).hostname;\n    } catch {\n      return url;\n    }\n  };\n\n  const handleVisit = () => {\n    if (bookmark) {\n      window.open(bookmark.url, '_blank', 'noopener,noreferrer');\n    }\n  };\n\n  const handleBack = () => {\n    window.history.back();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"container max-w-4xl mx-auto px-4 py-8\">\n          <div className=\"space-y-6\">\n            <Skeleton className=\"h-8 w-3/4\" />\n            <Card>\n              <CardHeader>\n                <Skeleton className=\"h-6 w-1/2\" />\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-32 w-full\" />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !bookmark) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-2xl font-bold text-foreground\">\n            {error || \"Bookmark not found\"}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            This bookmark may have been removed or is no longer shared.\n          </p>\n          <Button onClick={handleBack} variant=\"outline\" className=\"flex items-center gap-2\">\n            <ArrowLeft size={16} />\n            Go Back\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const timeAgo = formatDistanceToNow(new Date(bookmark.createdAt), { addSuffix: true });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"shared-bookmark-title\">\n                {bookmark.name}\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Shared bookmark â€¢ {timeAgo}\n              </p>\n            </div>\n            <Button\n              onClick={handleVisit}\n              size=\"lg\"\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-visit-shared-bookmark\"\n            >\n              <span>Visit Website</span>\n              <ExternalLink size={16} />\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Globe size={18} />\n                Website Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* URL Section */}\n              <div className=\"space-y-2\">\n                <div className=\"bg-muted/50 rounded-lg p-4\">\n                  <p className=\"text-sm font-mono break-all text-foreground\" data-testid=\"shared-bookmark-url\">\n                    {bookmark.url}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-2\" data-testid=\"shared-bookmark-domain\">\n                    {getDomain(bookmark.url)}\n                  </p>\n                </div>\n              </div>\n\n              {/* Description Section */}\n              {bookmark.description && (\n                <>\n                  <Separator />\n                  <div className=\"space-y-3\">\n                    <h3 className=\"font-medium text-foreground\">Description</h3>\n                    <div \n                      className=\"prose prose-sm max-w-none dark:prose-invert prose-headings:font-semibold prose-h1:text-lg prose-h2:text-base prose-h3:text-sm prose-p:text-sm prose-a:text-primary prose-strong:text-foreground prose-code:text-sm prose-code:bg-muted prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-pre:bg-muted prose-pre:text-sm prose-blockquote:border-l-primary prose-li:text-sm\"\n                      data-testid=\"shared-bookmark-description\"\n                    >\n                      <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                        {bookmark.description}\n                      </ReactMarkdown>\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {/* Tags Section */}\n              {bookmark.tags && bookmark.tags.length > 0 && (\n                <>\n                  <Separator />\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Tag size={16} />\n                      <h3 className=\"font-medium text-foreground\">Tags</h3>\n                    </div>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {bookmark.tags.map((tag, index) => (\n                        <Badge\n                          key={index}\n                          variant=\"secondary\"\n                          className=\"text-xs\"\n                          data-testid={`shared-tag-${tag.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {/* Category Section */}\n              {bookmark.category && (\n                <>\n                  <Separator />\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Folder size={16} />\n                      <h3 className=\"font-medium text-foreground\">Category</h3>\n                    </div>\n                    <Badge variant=\"outline\" data-testid=\"shared-bookmark-category\">\n                      {bookmark.category.name}\n                    </Badge>\n                  </div>\n                </>\n              )}\n\n              {/* Metadata */}\n              <Separator />\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Calendar size={16} />\n                  <h3 className=\"font-medium text-foreground\">Details</h3>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  <p>\n                    <span className=\"font-medium\">Shared:</span> {timeAgo}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Footer */}\n          <div className=\"text-center pt-8 border-t\">\n            <p className=\"text-sm text-muted-foreground\">\n              This bookmark was shared publicly. Create your own bookmark manager to organize and share your links.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "size_bytes": 8741
    },
    "server/link-checker-service.ts": {
      "content": "import { storage } from \"./storage\";\nimport { URL } from 'url';\nimport * as dns from 'dns';\nimport { promisify } from 'util';\n\n// DNS lookup promisified\nconst dnsLookup = promisify(dns.lookup);\n\n// Private IP range checks\nconst isPrivateIP = (ip: string): boolean => {\n  const parts = ip.split('.').map(Number);\n  if (parts.length !== 4 || parts.some(part => isNaN(part) || part < 0 || part > 255)) {\n    return true; // Invalid IP, consider it private for safety\n  }\n  \n  // IPv4 private ranges\n  if (parts[0] === 10) return true; // 10.0.0.0/8\n  if (parts[0] === 172 && parts[1] >= 16 && parts[1] <= 31) return true; // 172.16.0.0/12\n  if (parts[0] === 192 && parts[1] === 168) return true; // 192.168.0.0/16\n  if (parts[0] === 127) return true; // 127.0.0.0/8 (localhost)\n  if (parts[0] === 169 && parts[1] === 254) return true; // 169.254.0.0/16 (link-local)\n  if (parts[0] === 224) return true; // 224.0.0.0/4 (multicast)\n  if (parts[0] >= 240) return true; // 240.0.0.0/4 (reserved)\n  \n  return false;\n};\n\n// IPv6 private range checks\nconst isPrivateIPv6 = (ip: string): boolean => {\n  // IPv6 localhost\n  if (ip === '::1') return true;\n  \n  // IPv6 private ranges (simplified check)\n  if (ip.startsWith('fc') || ip.startsWith('fd')) return true; // fc00::/7\n  if (ip.startsWith('fe80:')) return true; // fe80::/10 (link-local)\n  if (ip.startsWith('::ffff:')) {\n    // IPv4-mapped IPv6 addresses\n    const ipv4Part = ip.substring(7);\n    return isPrivateIP(ipv4Part);\n  }\n  \n  return false;\n};\n\n// Hostname blocklist\nconst isBlockedHostname = (hostname: string): boolean => {\n  const blocked = [\n    'localhost',\n    '127.0.0.1',\n    '::1',\n    '0.0.0.0',\n    'metadata.google.internal', // Google Cloud metadata\n    '169.254.169.254', // AWS/Azure metadata\n    'metadata.azure.com',\n    'metadata.packet.net'\n  ];\n  \n  return blocked.includes(hostname.toLowerCase());\n};\n\nexport class LinkCheckerService {\n  private intervalId: NodeJS.Timeout | null = null;\n  private isRunning = false;\n  private isCheckInProgress = false;\n  private lastRunAt: Date | null = null;\n  private readonly CHECK_INTERVAL = 30 * 60 * 1000; // 30 minutes in milliseconds\n  private readonly BATCH_SIZE = 25; // Check 25 bookmarks per batch\n  private readonly MAX_CONCURRENT_CHECKS = 5; // Max concurrent link checks\n  private readonly MAX_CONTENT_LENGTH = 1024 * 1024 * 10; // 10MB limit\n  private readonly MAX_REDIRECTS = 5; // Maximum redirects to follow\n  private readonly REQUEST_TIMEOUT = 10000; // 10 second timeout\n\n  constructor() {\n    console.log('Link Checker Service initialized');\n  }\n\n  /**\n   * Start the periodic link checking service\n   */\n  start(): void {\n    if (this.isRunning) {\n      console.log('Link Checker Service is already running');\n      return;\n    }\n\n    console.log('Starting Link Checker Service...');\n    this.isRunning = true;\n\n    // Run an initial check after 1 minute (to allow server to fully start)\n    setTimeout(() => {\n      this.performPeriodicCheck();\n    }, 60 * 1000);\n\n    // Set up the recurring interval\n    this.intervalId = setInterval(() => {\n      this.performPeriodicCheck();\n    }, this.CHECK_INTERVAL);\n\n    console.log(`Link Checker Service started with ${this.CHECK_INTERVAL / 1000 / 60} minute intervals`);\n  }\n\n  /**\n   * Stop the periodic link checking service\n   */\n  stop(): void {\n    if (!this.isRunning) {\n      console.log('Link Checker Service is not running');\n      return;\n    }\n\n    console.log('Stopping Link Checker Service...');\n    this.isRunning = false;\n\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n\n    console.log('Link Checker Service stopped');\n  }\n\n  /**\n   * Get the current status of the service\n   */\n  getStatus(): { \n    isRunning: boolean; \n    isCheckInProgress: boolean;\n    lastRunAt: Date | null;\n    nextCheckIn?: number;\n    nextRunAt?: Date;\n  } {\n    const nextRunAt = this.lastRunAt \n      ? new Date(this.lastRunAt.getTime() + this.CHECK_INTERVAL)\n      : undefined;\n      \n    return {\n      isRunning: this.isRunning,\n      isCheckInProgress: this.isCheckInProgress,\n      lastRunAt: this.lastRunAt,\n      nextCheckIn: this.isRunning ? this.CHECK_INTERVAL : undefined,\n      nextRunAt: this.isRunning ? nextRunAt : undefined,\n    };\n  }\n\n  /**\n   * Manually trigger a link check cycle (for testing/admin purposes)\n   */\n  async triggerManualCheck(): Promise<{ message: string; results?: any }> {\n    try {\n      console.log('Manual link check triggered');\n      const results = await this.performPeriodicCheck();\n      return {\n        message: 'Manual link check completed',\n        results,\n      };\n    } catch (error) {\n      console.error('Manual link check failed:', error);\n      return {\n        message: 'Manual link check failed',\n        results: { error: error instanceof Error ? error.message : 'Unknown error' },\n      };\n    }\n  }\n\n  /**\n   * Perform the actual periodic link checking\n   */\n  private async performPeriodicCheck(): Promise<any> {\n    if (!this.isRunning) {\n      console.log('Link checker service is stopped, skipping check');\n      return { skipped: true, reason: 'Service not running' };\n    }\n\n    // Prevent overlapping runs\n    if (this.isCheckInProgress) {\n      console.log('Link check already in progress, skipping this cycle');\n      return { skipped: true, reason: 'Check already in progress' };\n    }\n\n    console.log('Starting periodic link check...');\n    this.isCheckInProgress = true;\n    this.lastRunAt = new Date();\n    const startTime = Date.now();\n\n    try {\n      // Get bookmarks that need checking (prioritize older/unchecked)\n      const bookmarksToCheck = await storage.getBookmarksForLinkCheck(this.BATCH_SIZE);\n      \n      if (bookmarksToCheck.length === 0) {\n        console.log('No bookmarks need checking at this time');\n        return { checked: 0, message: 'No bookmarks need checking' };\n      }\n\n      console.log(`Found ${bookmarksToCheck.length} bookmarks to check`);\n\n      const results = {\n        total: bookmarksToCheck.length,\n        checked: 0,\n        ok: 0,\n        broken: 0,\n        timeout: 0,\n        failed: 0,\n        errors: [] as string[],\n      };\n\n      // Process bookmarks in smaller concurrent batches\n      for (let i = 0; i < bookmarksToCheck.length; i += this.MAX_CONCURRENT_CHECKS) {\n        const batch = bookmarksToCheck.slice(i, i + this.MAX_CONCURRENT_CHECKS);\n        \n        const batchPromises = batch.map(async (bookmark) => {\n          try {\n            // Simulate checking as if done by system user (no specific userId)\n            // We'll call the internal performLinkCheck method directly\n            const result = await this.performSingleLinkCheck(bookmark.url);\n            \n            // Update the bookmark's link status\n            await storage.updateLinkStatus(\n              bookmark.id,\n              result.linkStatus,\n              result.httpStatus,\n              result.linkStatus === 'ok' ? 0 : undefined // Reset fail count on success\n            );\n\n            results.checked++;\n            switch (result.linkStatus) {\n              case 'ok':\n                results.ok++;\n                break;\n              case 'broken':\n                results.broken++;\n                break;\n              case 'timeout':\n                results.timeout++;\n                break;\n            }\n\n            console.log(`âœ“ Checked bookmark ${bookmark.id}: ${result.linkStatus} (${result.httpStatus || 'N/A'})`);\n          } catch (error) {\n            console.error(`âœ— Failed to check bookmark ${bookmark.id}:`, error);\n            results.failed++;\n            results.errors.push(`Bookmark ${bookmark.id}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            \n            // Update with error status\n            try {\n              await storage.updateLinkStatus(bookmark.id, 'broken', undefined, undefined);\n            } catch (updateError) {\n              console.error(`Failed to update error status for bookmark ${bookmark.id}:`, updateError);\n            }\n          }\n        });\n\n        // Wait for this batch to complete\n        await Promise.allSettled(batchPromises);\n        \n        // Small delay between batches to be respectful to external servers\n        if (i + this.MAX_CONCURRENT_CHECKS < bookmarksToCheck.length) {\n          await new Promise(resolve => setTimeout(resolve, 2000)); // 2 second delay\n        }\n      }\n\n      const duration = Date.now() - startTime;\n      console.log(`Periodic link check completed in ${duration}ms`);\n      console.log(`Results: ${results.checked} checked, ${results.ok} ok, ${results.broken} broken, ${results.timeout} timeout, ${results.failed} failed`);\n\n      return results;\n    } catch (error) {\n      console.error('Error during periodic link check:', error);\n      return { \n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime \n      };\n    } finally {\n      // Always reset the in-progress flag\n      this.isCheckInProgress = false;\n    }\n  }\n\n  /**\n   * Perform comprehensive SSRF-safe URL validation\n   */\n  private async validateUrlForSsrf(url: string): Promise<{ valid: boolean; reason?: string }> {\n    try {\n      const parsedUrl = new URL(url);\n      \n      // 1. Protocol validation - only allow http/https\n      if (!['http:', 'https:'].includes(parsedUrl.protocol)) {\n        return { \n          valid: false, \n          reason: `Blocked protocol: ${parsedUrl.protocol}. Only HTTP and HTTPS are allowed.` \n        };\n      }\n\n      // 2. Hostname validation\n      const hostname = parsedUrl.hostname.toLowerCase();\n      \n      // Block dangerous hostnames\n      if (isBlockedHostname(hostname)) {\n        console.warn(`SSRF attempt blocked: ${hostname} from URL ${url}`);\n        return { \n          valid: false, \n          reason: `Blocked hostname: ${hostname}` \n        };\n      }\n\n      // 3. IP address validation via DNS lookup\n      try {\n        const { address, family } = await dnsLookup(hostname);\n        \n        // Check IPv4 private ranges\n        if (family === 4 && isPrivateIP(address)) {\n          console.warn(`SSRF attempt blocked: Private IPv4 ${address} for hostname ${hostname}`);\n          return { \n            valid: false, \n            reason: `Blocked private IPv4 address: ${address}` \n          };\n        }\n        \n        // Check IPv6 private ranges\n        if (family === 6 && isPrivateIPv6(address)) {\n          console.warn(`SSRF attempt blocked: Private IPv6 ${address} for hostname ${hostname}`);\n          return { \n            valid: false, \n            reason: `Blocked private IPv6 address: ${address}` \n          };\n        }\n      } catch (dnsError) {\n        // DNS lookup failed - could be invalid domain or network issue\n        console.warn(`DNS lookup failed for ${hostname}:`, dnsError);\n        return { \n          valid: false, \n          reason: 'DNS lookup failed - invalid or unreachable hostname' \n        };\n      }\n\n      // 4. Port validation - block common internal service ports\n      const port = parsedUrl.port;\n      if (port) {\n        const portNum = parseInt(port, 10);\n        const blockedPorts = [\n          22,   // SSH\n          23,   // Telnet\n          25,   // SMTP\n          53,   // DNS\n          135,  // RPC\n          139,  // NetBIOS\n          445,  // SMB\n          993,  // IMAPS\n          995,  // POP3S\n          1433, // SQL Server\n          3306, // MySQL\n          3389, // RDP\n          5432, // PostgreSQL\n          5984, // CouchDB\n          6379, // Redis\n          8080, // Alternative HTTP (often internal)\n          9200, // Elasticsearch\n          27017 // MongoDB\n        ];\n        \n        if (blockedPorts.includes(portNum)) {\n          console.warn(`SSRF attempt blocked: Dangerous port ${portNum} for URL ${url}`);\n          return { \n            valid: false, \n            reason: `Blocked port: ${portNum}` \n          };\n        }\n      }\n\n      return { valid: true };\n    } catch (error) {\n      console.warn(`URL validation error for ${url}:`, error);\n      return { \n        valid: false, \n        reason: 'Invalid URL format' \n      };\n    }\n  }\n\n  /**\n   * Perform a single link check with comprehensive SSRF protection\n   */\n  private async performSingleLinkCheck(url: string): Promise<{ linkStatus: string; httpStatus?: number }> {\n    try {\n      // 1. Comprehensive SSRF validation\n      const validation = await this.validateUrlForSsrf(url);\n      if (!validation.valid) {\n        console.warn(`Link check blocked for security: ${validation.reason} - URL: ${url}`);\n        return { linkStatus: 'broken', httpStatus: undefined };\n      }\n\n      // 2. Create abort controller for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.REQUEST_TIMEOUT);\n\n      try {\n        let redirectCount = 0;\n        let currentUrl = url;\n        let response: Response;\n\n        // 3. Custom fetch with redirect limit and content length checking\n        const fetchWithLimits = async (fetchUrl: string, method: 'HEAD' | 'GET') => {\n          const fetchResponse = await fetch(fetchUrl, {\n            method,\n            headers: {\n              'User-Agent': 'Mozilla/5.0 (compatible; BookmarkBot/1.0; +bookmark-checker)',\n              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n              'Accept-Language': 'en-US,en;q=0.5',\n              'Accept-Encoding': 'gzip, deflate',\n              'DNT': '1',\n              'Connection': 'close',\n              'Upgrade-Insecure-Requests': '1',\n            },\n            signal: controller.signal,\n            redirect: 'manual', // Handle redirects manually for better control\n          });\n          \n          // Check content length if available\n          const contentLength = fetchResponse.headers.get('content-length');\n          if (contentLength && parseInt(contentLength, 10) > this.MAX_CONTENT_LENGTH) {\n            throw new Error(`Content too large: ${contentLength} bytes`);\n          }\n          \n          return fetchResponse;\n        };\n\n        // 4. Try HEAD request first (faster), handle redirects manually\n        response = await fetchWithLimits(currentUrl, 'HEAD');\n        \n        // Handle redirects manually with limits\n        while (response.status >= 300 && response.status < 400 && redirectCount < this.MAX_REDIRECTS) {\n          const location = response.headers.get('location');\n          if (!location) {\n            break;\n          }\n          \n          // Validate redirect URL for SSRF\n          const redirectUrl = new URL(location, currentUrl).toString();\n          const redirectValidation = await this.validateUrlForSsrf(redirectUrl);\n          if (!redirectValidation.valid) {\n            console.warn(`Redirect blocked for security: ${redirectValidation.reason} - Redirect URL: ${redirectUrl}`);\n            return { linkStatus: 'broken', httpStatus: response.status };\n          }\n          \n          redirectCount++;\n          currentUrl = redirectUrl;\n          response = await fetchWithLimits(currentUrl, 'HEAD');\n        }\n        \n        // If we hit redirect limit, return broken\n        if (redirectCount >= this.MAX_REDIRECTS && response.status >= 300 && response.status < 400) {\n          console.warn(`Too many redirects (${redirectCount}) for URL: ${url}`);\n          return { linkStatus: 'broken', httpStatus: response.status };\n        }\n\n        // 5. If HEAD fails with 405 (Method Not Allowed), try GET\n        if (response.status === 405) {\n          response = await fetchWithLimits(currentUrl, 'GET');\n        }\n\n        clearTimeout(timeoutId);\n\n        // 6. Classify status\n        const status = response.status;\n        if (status >= 200 && status < 300) {\n          return { linkStatus: 'ok', httpStatus: status };\n        } else if (status >= 400) {\n          return { linkStatus: 'broken', httpStatus: status };\n        } else {\n          // 3xx codes that we couldn't follow should be considered OK if valid\n          return { linkStatus: 'ok', httpStatus: status };\n        }\n      } catch (fetchError) {\n        clearTimeout(timeoutId);\n        \n        if (fetchError instanceof Error) {\n          if (fetchError.name === 'AbortError') {\n            return { linkStatus: 'timeout', httpStatus: undefined };\n          }\n          \n          // Log security-related errors differently\n          if (fetchError.message.includes('Content too large')) {\n            console.warn(`Content size limit exceeded for URL: ${url}`);\n            return { linkStatus: 'broken', httpStatus: undefined };\n          }\n        }\n        \n        // Network errors, DNS failures, etc.\n        console.warn(`Network error for URL ${url}:`, fetchError);\n        return { linkStatus: 'broken', httpStatus: undefined };\n      }\n    } catch (error) {\n      // Invalid URL format or validation error\n      console.warn(`URL validation/parsing error for ${url}:`, error);\n      return { linkStatus: 'broken', httpStatus: undefined };\n    }\n  }\n}\n\n// Create and export a singleton instance\nexport const linkCheckerService = new LinkCheckerService();",
      "size_bytes": 17188
    },
    "client/src/components/bulk-action-toolbar.tsx": {
      "content": "import { useState } from \"react\";\nimport { Trash2, FolderOpen, CheckSquare, Square, X, Loader2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Category } from \"@shared/schema\";\n\ninterface BulkActionToolbarProps {\n  selectedCount: number;\n  totalCount: number;\n  isAllSelected: boolean;\n  onSelectAll: () => void;\n  onDeselectAll: () => void;\n  onBulkDelete: () => void;\n  onBulkMove: (categoryId: number | null) => void;\n  onExitBulkMode: () => void;\n  isLoading?: boolean;\n}\n\nexport function BulkActionToolbar({\n  selectedCount,\n  totalCount,\n  isAllSelected,\n  onSelectAll,\n  onDeselectAll,\n  onBulkDelete,\n  onBulkMove,\n  onExitBulkMode,\n  isLoading = false\n}: BulkActionToolbarProps) {\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n\n  // Fetch categories for move operation\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const handleSelectAllToggle = () => {\n    if (isAllSelected) {\n      onDeselectAll();\n    } else {\n      onSelectAll();\n    }\n  };\n\n  const handleDeleteClick = () => {\n    if (selectedCount === 0) return;\n    setShowDeleteDialog(true);\n  };\n\n  const confirmDelete = () => {\n    onBulkDelete();\n    setShowDeleteDialog(false);\n  };\n\n  const handleMoveToCategory = (value: string) => {\n    if (selectedCount === 0) return;\n    const categoryId = value === \"uncategorized\" ? null : parseInt(value);\n    onBulkMove(categoryId);\n  };\n\n  return (\n    <>\n      {/* Bulk Action Toolbar */}\n      <div className=\"bg-primary/10 border border-primary/20 rounded-lg p-4 mb-6\">\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3 flex-1\">\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"px-3 py-1\" data-testid=\"bulk-selection-count\">\n                {selectedCount} of {totalCount} selected\n              </Badge>\n              \n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={handleSelectAllToggle}\n                className=\"h-8\"\n                data-testid=\"button-select-all-toggle\"\n              >\n                {isAllSelected ? <Square size={14} /> : <CheckSquare size={14} />}\n                <span className=\"ml-2\">\n                  {isAllSelected ? \"Deselect All\" : \"Select All\"}\n                </span>\n              </Button>\n            </div>\n\n            <div className=\"flex items-center gap-2 flex-wrap\">\n              {/* Move to Category */}\n              <Select onValueChange={handleMoveToCategory} disabled={selectedCount === 0 || isLoading}>\n                <SelectTrigger className=\"w-48 h-8\" data-testid=\"select-move-category\">\n                  <FolderOpen size={14} className=\"mr-2\" />\n                  <SelectValue placeholder=\"Move to...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"uncategorized\">Uncategorized</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id.toString()}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Delete Selected */}\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={handleDeleteClick}\n                disabled={selectedCount === 0 || isLoading}\n                className=\"h-8\"\n                data-testid=\"button-bulk-delete\"\n              >\n                {isLoading ? (\n                  <Loader2 size={14} className=\"animate-spin mr-2\" />\n                ) : (\n                  <Trash2 size={14} className=\"mr-2\" />\n                )}\n                Delete ({selectedCount})\n              </Button>\n            </div>\n          </div>\n\n          {/* Exit Bulk Mode */}\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={onExitBulkMode}\n            className=\"h-8\"\n            data-testid=\"button-exit-bulk-mode\"\n          >\n            <X size={14} className=\"mr-2\" />\n            Exit\n          </Button>\n        </div>\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent data-testid=\"bulk-delete-dialog\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Selected Bookmarks</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete {selectedCount} bookmark{selectedCount === 1 ? '' : 's'}? \n              This action cannot be undone.\n              {selectedCount > 5 && (\n                <div className=\"mt-2 p-2 bg-destructive/10 rounded text-destructive-foreground\">\n                  <strong>Warning:</strong> You're about to delete {selectedCount} bookmarks at once.\n                </div>\n              )}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-bulk-delete\">\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-bulk-delete\"\n            >\n              Delete {selectedCount} Bookmark{selectedCount === 1 ? '' : 's'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}",
      "size_bytes": 6186
    }
  },
  "version": 1
}